<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Jekyll Bootstrap</title>
 <link href="http://bcferrycoder.github.com/atom.xml" rel="self"/>
 <link href="http://bcferrycoder.github.com"/>
 <updated>2013-01-03T13:55:35-08:00</updated>
 <id>http://bcferrycoder.github.com</id>
 <author>
   <name>John Wetherill</name>
   <email>johnw@activestate.com</email>
 </author>

 
 <entry>
   <title>Barriers to Entry</title>
   <link href="http://bcferrycoder.github.com/2013/01/02/barriers-to-entry"/>
   <updated>2013-01-02T00:00:00-08:00</updated>
   <id>http://bcferrycoder.github.com/2013/01/02/barriers-to-entry</id>
   <content type="html">&lt;p&gt;Not having these are barriers to entry:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Need UI driven cluster management&lt;/li&gt;

&lt;li&gt;Full cluster automation&lt;/li&gt;

&lt;li&gt;Full cluster versioning (check in a cluster config with a branch)&lt;/li&gt;

&lt;li&gt;Autoscaling on all clouds not just EC2 or &amp;#8230; 5.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Having these are barriers to entry:&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>syntax highlighting</title>
   <link href="http://bcferrycoder.github.com/2012/12/25/syntax-highlighting"/>
   <updated>2012-12-25T00:00:00-08:00</updated>
   <id>http://bcferrycoder.github.com/2012/12/25/syntax-highlighting</id>
   <content type="html">&lt;pre&gt;
&lt;code class='bash'&gt;
       #!/bin/bash
       echo hello
&lt;/code&gt;
&lt;/pre&gt;&lt;pre&gt;
&lt;code class='java'&gt;
   public class Hello {
      public static void main() {
         System.out.println(&quot;Hello World!&quot;);
      }
   }
&lt;/code&gt;
&lt;/pre&gt;&lt;pre&gt;
&lt;code class='xml'&gt;
   &lt;a&gt;
     &lt;b c='d'&gt;
       WHy now
     &lt;/b&gt;
    &lt;/a&gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;pre&gt;
&lt;code class='perl'&gt;
    name: hello
    framework: 
        type: standalone
        runtime: java7
    mem: 1088M
    command: java Hello
&lt;/code&gt;
&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Enterprise in a Basement</title>
   <link href="http://bcferrycoder.github.com/2012/12/23/enterprise-in-a-basement"/>
   <updated>2012-12-23T00:00:00-08:00</updated>
   <id>http://bcferrycoder.github.com/2012/12/23/enterprise-in-a-basement</id>
   <content type="html">&lt;p&gt;Enterprise in a Basement&lt;/p&gt;

&lt;p&gt;When I first came across Stackato in July I almost fell out of my chair as its implications hit me. Since that moment I&amp;#8217;ve been consumed with its potential and I&amp;#8217;ll not rest until I can shed some of these ideas and concepts that are continually tormenting me.&lt;/p&gt;

&lt;p&gt;This is mostly centered around Stackato and how it aligns with enterprise software.&lt;/p&gt;

&lt;p&gt;And the only way I think I can get this out of my system is to build something, just to see if my perceptions are accurate.&lt;/p&gt;

&lt;p&gt;My vision is to a large-scale proof of concept that shows the power of Stackato at building reliable, scalable, secure enterprise software at HUGE savings.&lt;/p&gt;

&lt;h3 id='start_in_the_basement'&gt;Start in the Basement&lt;/h3&gt;

&lt;p&gt;I have a stack of Linux installation DVDs in my basement for a variety of distros. I also have a friend with four Sun Ultra 24 workstations collecting dust in his attic. He graciously lent them, and so now I have four boxes spinning (and consuming their fair share of kWh) with four different operating systems: Ubuntu, Centos, SUSE, and Fedora (as a tribute to a university in San Francisco, for no particular reason than the letters made me do it.&lt;/p&gt;

&lt;p&gt;This blog will cronicle the construction of one or more multi-node Stackato clusters, and the simulation of a full-fledged enterprise application, running on the clusters. Considerable focus will be on enterprise requirements such as scalability, security, performancing, reliablity, and how Platform as a Service greatly facilities these.&lt;/p&gt;

&lt;p&gt;Disclaimer: I work for ActiveState&amp;#8230;&lt;/p&gt;

&lt;p&gt;Ingredients&lt;/p&gt;

&lt;p&gt;The four U24 workstations are configured thusly:&lt;/p&gt;

&lt;p&gt;Ubuntu: 8GB RAM, 1TB disk Centos: 8GB RAM, 1TB disk, quad core 3GZ Fedora: 4GB RAM, 750GB disk SUSE: 4GB RAM, 750GB disk&lt;/p&gt;

&lt;p&gt;Three Macs:&lt;/p&gt;

&lt;p&gt;13&amp;#8221; MacBook Pro, single core, 4GB RAM, ???GB 15&amp;#8221; MacBook Pro, single core, 8GB RAM, 750GB Disk 15&amp;#8221; MacBook Retina, single core 2.3GHz, 8GB RAM&lt;/p&gt;

&lt;p&gt;Totals: 44 GB RAM 5TB Disk X processors&lt;/p&gt;

&lt;p&gt;Misc Hardware&lt;/p&gt;

&lt;p&gt;6 monitors iPad iPhone camera toshiba netbook smart meter&lt;/p&gt;

&lt;p&gt;WORTH NOTING: HOST SYSTEMS are DHCP (I was avoiding that for some reason)&lt;/p&gt;

&lt;p&gt;Software&lt;/p&gt;

&lt;p&gt;You need a VM container / hypervisor.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m using VirtualBox and VMWare.&lt;/p&gt;

&lt;p&gt;Installing vbox on Mac and Windows is quick and painless.&lt;/p&gt;

&lt;p&gt;On Linux it&amp;#8217;s a pain in the butt. It took way too long messing around with dependencies and the like trying to get VirtualBox running on SUSE and Fedora. Ubuntu was easier, and Centos worked immediately.&lt;/p&gt;

&lt;p&gt;In fact, I had to give up entirely on SUSE, and was about to go with another Centos instance when it occurred to me that running on Windows would make an even better story.&lt;/p&gt;

&lt;p&gt;So the configuration is now:&lt;/p&gt;

&lt;p&gt;Ubuntu: 8GB RAM, 1TB disk Centos: 8GB RAM, 1TB disk Fedora: 4GB RAM, 750GB disk Windows7: 4GB RAM, 750GB disk&lt;/p&gt;

&lt;p&gt;Summary to this point:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Loaded Ubuntu/Centos/Fedora/Windows7 on four Ultra 24s&lt;/li&gt;

&lt;li&gt;Installed VirtualBox&lt;/li&gt;

&lt;li&gt;Downloaded latest Stackato Image, and imported into VBox&lt;/li&gt;

&lt;li&gt;Booted each VM, for a total of six (two each on Ubuntu and Centos).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Next I prepared the cluster&lt;/p&gt;

&lt;p&gt;Each node in a cluster must have a static ip, and its hostname must be resolvable somehow.&lt;/p&gt;

&lt;p&gt;I allocated a block of IPs in the 192.168.1 subnet on my home network for each stackato node:&lt;/p&gt;

&lt;p&gt;ubuntu1: 61 ubuntu2: 62 centos1: 63 centos2: 64 win7: 65 fedora: 66 mac1: 80 mac2: 81 mac3: 83&lt;/p&gt;

&lt;p&gt;Then for each Stackato instance.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Assign the ip address from the above list with &amp;#8220;kato op static_ip&amp;#8221;. For convenience I am using &amp;#8220;xip.io&amp;#8221; as my &amp;#8220;pseudo-dns&amp;#8221; to associate the hostname with the ip address.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Rename the instance using &amp;#8220;kato rename 192.168.1.63.xip.io&amp;#8221;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2b. disable mdns as directed: &amp;#8220;kato disable mdns&amp;#8221; 2c. reboot as directed: &amp;#8220;sudo reboot&amp;#8221;&lt;/p&gt;

&lt;p&gt;I picked centos1 as my primary/master node.&lt;/p&gt;

&lt;p&gt;So to prepare it:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;kato setup core api.192.168.1.63.xip.io&lt;/li&gt;
&lt;/ol&gt;</content>
 </entry>
 
 <entry>
   <title>The Big Demo: Enterprise-Hardy Stackato POC<br></title>
   <link href="http://bcferrycoder.github.com/2012/12/21/deo-vision"/>
   <updated>2012-12-21T00:00:00-08:00</updated>
   <id>http://bcferrycoder.github.com/2012/12/21/deo-vision</id>
   <content type="html">&lt;p&gt;2013 is The Year of the PaaS. Everyone at ActiveState knows this, but the industry at large is mostly in ignorance of the PaaS wave that&amp;#8217;s on its way.&lt;/p&gt;

&lt;p&gt;The opportunity is mind-boggling, but the challenges are equally huge. We need to get the message out to a largely-uneducated market now so we then ride this wave, front and center all the way to prosperous shores.&lt;/p&gt;

&lt;p&gt;This challenges are enormous given the complexity of the product, the sheer breadth of its scope, and the immaturity of the market.&lt;/p&gt;

&lt;p&gt;A technical demo / POC can be highly effective and appealing if it showcases the (astonishingly large) intersection of common enterprise software requirements and major Stackato features.&lt;/p&gt;

&lt;h3 id='current_stackato_demo_impact'&gt;Current Stackato Demo Impact&lt;/h3&gt;

&lt;p&gt;Our current demo portfolio and app store inventory are compelling but are mostly directed at either programmers or IT.&lt;/p&gt;

&lt;p&gt;As such we are missing the mark on several crucial areas of focus for enterprise software organizations and their decision makers. Like IT, these folks are keenly interested in high availability, scalability, security, and disaster recovery, but they&amp;#8217;re more focused on the application and software development lifecycle perspective. These are areas that we barely touch on, except in reference to IaaS.&lt;/p&gt;

&lt;p&gt;A strong demo suite that hits these areas hard, from a software development/engineering perspective, would fill this gap.&lt;/p&gt;

&lt;p&gt;In short, &lt;strong&gt;we need an enterprise demo with teeth&lt;/strong&gt;, one that&amp;#8217;s aimed directly at corporate CTOs, CIOs, and Engineering VPs, but that also resonates strongly with architects and senior engineers.&lt;/p&gt;
&lt;img src='/assets/images/circlesaw.jpg' style='margin:40px;' width='100p' /&gt;
&lt;h4 id='the_teeth'&gt;The Teeth&lt;/h4&gt;

&lt;p&gt;Scaling is a hotspot. A scaling-centric POC, based on a minimalistic app with real-world requirements, will illustrate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a coherent, planned, measurable, achievable scaling strategy&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;auto-scaling: what it means, on what configurations is it supported, how is it realized, what are its limitations&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Stackato&amp;#8217;s features and design that enable app scaling&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;leveraging logging to scale&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;bundled performance measurement and instrumentation&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;bundled Scaling Best Practices&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Takehome: With Stackato, scaling an application takes on an entirely new meaning, and brings within easy reach visibility into performance characteristics and bottlenecks, and with optimization tools and practices to minimize costs.&lt;/p&gt;

&lt;h4 id='more_teeth'&gt;More Teeth&lt;/h4&gt;

&lt;p&gt;In addition to focusing on scaling the demo will highlight these enterprise software features/requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;polyglot (multiple programming languages, frameworks, libraries, toolsets)&lt;/li&gt;

&lt;li&gt;message bus centric&lt;/li&gt;

&lt;li&gt;db heavy: both nosql and sql&lt;/li&gt;

&lt;li&gt;massive data requirements&lt;/li&gt;

&lt;li&gt;centralized logging&lt;/li&gt;

&lt;li&gt;integration complexity, Enterprise Integration Patterns&lt;/li&gt;

&lt;li&gt;performance techniques / tools / apis&lt;/li&gt;

&lt;li&gt;multiple interacting layers and components&lt;/li&gt;

&lt;li&gt;external api (often http-based) to expose entities and behavior CHECK&lt;/li&gt;

&lt;li&gt;integrated and comprehensive auditing facilities&lt;/li&gt;

&lt;li&gt;high developer productivity&lt;/li&gt;

&lt;li&gt;realtime health and performance monitoring&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id='technology_stack'&gt;Technology Stack&lt;/h4&gt;

&lt;p&gt;This POC is be based on a minimalistic application with real-world requirements and technologies including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Java&lt;/li&gt;

&lt;li&gt;Spring&lt;/li&gt;

&lt;li&gt;Ruby on Rails and/or Sinatra&lt;/li&gt;

&lt;li&gt;Camel and Enterprise Integration Patterns&lt;/li&gt;

&lt;li&gt;html5/javascript/css&lt;/li&gt;

&lt;li&gt;ActiveMQ Message Bus&lt;/li&gt;

&lt;li&gt;MongoDB&lt;/li&gt;

&lt;li&gt;MySQL&lt;/li&gt;

&lt;li&gt;Loggly&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id='cost'&gt;Cost&lt;/h4&gt;

&lt;p&gt;Development:&lt;/p&gt;

&lt;p&gt;Deployment:&lt;/p&gt;

&lt;h4 id='deliverables'&gt;Deliverables&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;demo application on github and possibly App Store&lt;/li&gt;

&lt;li&gt;full slide deck&lt;/li&gt;

&lt;li&gt;multiple blogs (minimum 3)&lt;/li&gt;

&lt;li&gt;multiple screencasts (minimum 3)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id='future_enhancements'&gt;Future Enhancements&lt;/h4&gt;

&lt;p&gt;In short order the POC must be extended to also cover these areas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;High-Availability and Service Agreements&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Security (identity management, vulnerability assessment, intrusion detection and monitoring, data encryption (both in flight and at rest), DOS attacks and prevention,&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Disaster Recovery&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Mobility&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Analytics&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;strong auditable security with countermeasures across all relevant layers&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;realtime intrusion monitoring and detection&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;strict auth requirements, elaborate roles, acls, sso&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;service levels, responsiveness and strict performance and reliability criteria&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;highly available and resilient to major outages&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;multiple ports and communications channels&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;notifications and email delivery to user and system&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;extensive services interaction&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;batch and offline operation&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;extensive test capability&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;multiple international languages and locales&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;multitenancy&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;mobile support&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;rich web-based UI&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='presentation'&gt;Presentation&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Background&lt;/li&gt;

&lt;li&gt;App Requirements&lt;/li&gt;

&lt;li&gt;Technology Stack: Camel Pipes&lt;/li&gt;

&lt;li&gt;Stackato&lt;/li&gt;

&lt;li&gt;Scaling&lt;/li&gt;

&lt;li&gt;Other features&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then dive into one of several specific areas including;&lt;/p&gt;

&lt;h4 id='scaling_with_stackato'&gt;Scaling with Stackato:&lt;/h4&gt;

&lt;p&gt;Following directly from &amp;#8220;Mature Optimization&amp;#8221; from the &amp;#8220;Combatting Antipatterns&amp;#8221; series, this 45 minute presentation/demo builds up a minimal but comprehensive app with real-world requirements, then uses Stackato first hand to profile, identify bottlenecks, and guide design decisions for the application as it&amp;#8217;s scaled to great heights.&lt;/p&gt;

&lt;p&gt;Scaling early in the dev lifecycle ensures it will scale.&lt;/p&gt;

&lt;p&gt;This rule&lt;/p&gt;

&lt;p&gt;incredibly easy it is to scale an application&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve identified a score of traits/characteristics/requirements that are common to many enterprise software endeavors.&lt;/p&gt;

&lt;p&gt;Private PaaS in general and Stackato specifically nails an astonishing number of these traits. So many that it would be folly to initiate any major software endeavor without it.&lt;/p&gt;

&lt;p&gt;Of course we all know this: our challenge is conveying this message to corporate software stakeholders.&lt;/p&gt;

&lt;p&gt;My proposed answer: an enterprise-hardy comprehensive demo aimed&lt;/p&gt;

&lt;p&gt;and this is where a dazzling and comprehensive demo has the potential to significantly boost adoption.&lt;/p&gt;

&lt;h4 id='the_big_demo_high_level_view'&gt;The Big Demo: High Level View&lt;/h4&gt;

&lt;p&gt;PaaS Wave Lightning cast: Tidal wave, changes everything, anvils and lightbulbs, Platform&lt;/p&gt;

&lt;p&gt;Enterprise Software: quick blast through a handful of traits, skimming fast over the remaining 15&lt;/p&gt;

&lt;p&gt;Then introduce real world application, with real world requirements (including many from enterprise list).&lt;/p&gt;

&lt;p&gt;Then whip out Stackato, and use it to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;directly address many/most of the traits to great advantage&lt;/li&gt;

&lt;li&gt;foster engineering best procatices&lt;/li&gt;

&lt;li&gt;combat software antipatterns&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id='scale_early_thus_scale'&gt;Scale Early, thus Scale&lt;/h4&gt;

&lt;p&gt;Scaling is arguably the hottest topic in the PaaS world these days. A demo that hits this early will open lots of eyes and ears, and I predict wallets too.&lt;/p&gt;

&lt;h3 id='scaling_with_stackato'&gt;Scaling with Stackato&lt;/h3&gt;

&lt;p&gt;With Stackato (and an entire cloud) at your beck and call, issues of scale can be immediately brought to the forefront (as should be the case) instead of&lt;/p&gt;

&lt;p&gt;Stackto enables a powerful development model where applications scale full boar before any code has been written.&lt;/p&gt;

&lt;p&gt;Applications that need to scale (most?)&lt;/p&gt;

&lt;p&gt;greatly benefit often fail to do so due to their approach.&lt;/p&gt;

&lt;p&gt;Following proven scaling practices&lt;/p&gt;

&lt;p&gt;While at the same time building a highly scalable and reliable application that actually does something.&lt;/p&gt;

&lt;h3 id='technicalities'&gt;Technicalities&lt;/h3&gt;

&lt;p&gt;Stack: 15 x 2GB VMs, 2GB each&lt;/p&gt;

&lt;p&gt;A stubbed application skeleton will trivially implement much of functionality of application.&lt;/p&gt;

&lt;p&gt;A large cluster will be&lt;/p&gt;

&lt;p&gt;A great starting point is scalability which is one of our most compelling stories and one that generates huge interest at the shows I attend. It also happens to dovetail perfectly with my first &amp;#8220;antipatterns&amp;#8221; installment.&lt;/p&gt;

&lt;p&gt;When I first came across Stackato in July I almost fell out of my chair as its implications hit me. Since that moment I&amp;#8217;ve been consumed with its potential and I&amp;#8217;ll not rest until I can shed some of these ideas and concepts that are continually tormenting me.&lt;/p&gt;

&lt;p&gt;This is mostly centered around Stackato and how it aligns with enterprise software.&lt;/p&gt;

&lt;p&gt;Background:&lt;/p&gt;

&lt;p&gt;Most Enterprise Software efforts have or require many of these characteristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;multiple interacting layers and components&lt;/li&gt;

&lt;li&gt;multiple languages, frameworks, libraries, and toolsets&lt;/li&gt;

&lt;li&gt;clearly defined and measurable scaling strategy&lt;/li&gt;

&lt;li&gt;strong auditable security with countermeasures across all relevant layers&lt;/li&gt;

&lt;li&gt;strict auth requirements, elaborate roles, acls, sso&lt;/li&gt;

&lt;li&gt;centralized logging&lt;/li&gt;

&lt;li&gt;massive data requirements (tmi)&lt;/li&gt;

&lt;li&gt;message-based&lt;/li&gt;

&lt;li&gt;database centric&lt;/li&gt;

&lt;li&gt;realtime health, performance, and intrusion monitoring&lt;/li&gt;

&lt;li&gt;integration complexity (EIP)&lt;/li&gt;

&lt;li&gt;service levels, responsiveness and strict performance and reliability criteria&lt;/li&gt;

&lt;li&gt;highly available and resilient to major outages&lt;/li&gt;

&lt;li&gt;external api (often http-based) to expose entities and behavior&lt;/li&gt;

&lt;li&gt;multiple ports and communications channels&lt;/li&gt;

&lt;li&gt;notifications and email delivery to user and system&lt;/li&gt;

&lt;li&gt;extensive services interaction&lt;/li&gt;

&lt;li&gt;batch and offline operation&lt;/li&gt;

&lt;li&gt;extensive test capability&lt;/li&gt;

&lt;li&gt;multiple international language and locales&lt;/li&gt;

&lt;li&gt;multitenancy&lt;/li&gt;

&lt;li&gt;integrated and comprehensive auditing facilities&lt;/li&gt;

&lt;li&gt;mobile aspect&lt;/li&gt;

&lt;li&gt;portable (what&amp;#8217;s this mean?)&lt;/li&gt;

&lt;li&gt;comprehensable and maintainable codebase and technology stack&lt;/li&gt;

&lt;li&gt;productive for developers&lt;/li&gt;

&lt;li&gt;rich web-based UI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to the above, which are development and deployment centric, an entire overlying process must be in place with practices and methodologies the drive the entire development process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;development methadology (like scrum)&lt;/li&gt;

&lt;li&gt;QA&lt;/li&gt;

&lt;li&gt;test procedures and strategies&lt;/li&gt;

&lt;li&gt;deployment/release&lt;/li&gt;

&lt;li&gt;continuous Integration / continuous Delivery&lt;/li&gt;

&lt;li&gt;configuration management, source code management&lt;/li&gt;

&lt;li&gt;Monitoring&lt;/li&gt;

&lt;li&gt;logging&lt;/li&gt;

&lt;li&gt;hiring / onboarding&lt;/li&gt;

&lt;li&gt;docs&lt;/li&gt;

&lt;li&gt;collaboration&lt;/li&gt;

&lt;li&gt;replication / backups &amp;#8230;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a huge list (and not comprehensive).&lt;/p&gt;

&lt;p&gt;shazzzam!!!! (lightning strike)&lt;/p&gt;

&lt;p&gt;Most every bullet point above can be GREATLY facilitated by Stackato. The cost savings for teams and organizations, small and large, can be IMMEASURABLE. (These costs can, however, be lower-bound estimated)&lt;/p&gt;

&lt;p&gt;App Store Needs some Teeth&lt;/p&gt;

&lt;p&gt;Our current demo set (&amp;#8220;hello-&lt;em&gt;&amp;#8221;, &amp;#8220;currency converter&amp;#8221;) is compelling but our app store inventory (with exceptions) doesn&amp;#8217;t emphasize the enterprise hardiness and sheer value of what Stackato brings to the table.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We need a demo / deck / webcast that clearly showcases Stackato&amp;#8217;s contributions to many of the points above.&lt;/p&gt;

&lt;p&gt;A great starting point is scalability which is one of our most compelling stories and one that generates huge interest at the shows I attend. It also happens to dovetail perfectly with my first &amp;#8220;antipatterns&amp;#8221; installment.&lt;/p&gt;

&lt;h3 id='scaling_with_stackato'&gt;Scaling with Stackato&lt;/h3&gt;

&lt;p&gt;This 45 minute talk/demo will dive into using Stackato to build highly scalable apps.&lt;/p&gt;

&lt;p&gt;An enterprise application suite (simplified but real) will be built up, with requirements from the above list of traits: polyglot, database-centric, message-based, auditable, centralized logging, more.&lt;/p&gt;

&lt;p&gt;These apps will be deployed to a (previously configured) cluster, at which time I&amp;#8217;ll illustrate some amazingly simple techniques, enabled uniquely by the Stackato ecosystem, that can be used to easily pinpoint bottlenecks.&lt;/p&gt;

&lt;p&gt;Once identified, the cluster will be tuned to minimize the bottlenecks.&lt;/p&gt;

&lt;p&gt;Scaling Summary&lt;/p&gt;

&lt;p&gt;Using simple techniques that are unique to a PaaS environment, Stackato gives early visibility of an application&amp;#8217;s scaling characteristics, pinpointing bottlenecks, and immediately scaling out to accomodate if necessary.&lt;/p&gt;

&lt;p&gt;Now the rest of the demo&lt;/p&gt;

&lt;p&gt;Pick each point from the above list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;multiple interacting layers and components&lt;/li&gt;

&lt;li&gt;multiple languages, frameworks, libraries, and toolsets&lt;/li&gt;

&lt;li&gt;clearly defined and measurable scaling strategy&lt;/li&gt;

&lt;li&gt;etc. etc. etc. etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And show how Stackato greatly facilitates and aides the requirements/feature/characteristic&lt;/p&gt;

&lt;p&gt;Agenda:&lt;/p&gt;

&lt;p&gt;Show previously configured Stackto cluster Define requirements Rapid and brief framework introduction (cool and easy to grok) Show app code Run app Show logging&lt;/p&gt;

&lt;p&gt;agenda&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Thinking outside the Auto Box</title>
   <link href="http://bcferrycoder.github.com/2012/12/15/thinking-out-of-the-auto-box"/>
   <updated>2012-12-15T00:00:00-08:00</updated>
   <id>http://bcferrycoder.github.com/2012/12/15/thinking-out-of-the-auto-box</id>
   <content type="html">&lt;p&gt;Thinking outside the Auto Box&lt;/p&gt;

&lt;p&gt;How to deploy a Java8 application using BuildPacks.&lt;/p&gt;

&lt;p&gt;I was dissapointed when I learned that many new features in J7&lt;/p&gt;

&lt;p&gt;THE ELVIS OPERATOR IS NOT INCLUDED IN J7&lt;/p&gt;

&lt;p&gt;Thinking out of the (auto)box&lt;/p&gt;

&lt;p&gt;To illustrate Stackato&amp;#8217;s J8 support I&amp;#8217;ll pick a feature that&amp;#8217;s been a thorn in my side (and I&amp;#8217;m not alone, believe me) since it first appeared in Java5, and that&amp;#8217;s auto-boxing.&lt;/p&gt;

&lt;p&gt;Autoboxing is the feature by which Java automatically converts primitive and &amp;#8230; types&lt;/p&gt;

&lt;p&gt;The compiler takes care of this, eliminating boilerplate code like this:&lt;/p&gt;

&lt;p&gt;int d = Integer.parseInt( int d = 7;&lt;/p&gt;

&lt;p&gt;Why is this annoying? Well, in itself it&amp;#8217;s not, but every Java shop I&amp;#8217;ve worked at, including the Big Java Shop in the Sky (aka Sun) experienced the famous autoboxing bug:&lt;/p&gt;

&lt;p&gt;int&lt;/p&gt;

&lt;p&gt;And of course, depending on the code base, complexity, and ..&lt;/p&gt;

&lt;p&gt;NPE no longer.&lt;/p&gt;

&lt;p&gt;Now you can&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Java7 Comes to Stackato</title>
   <link href="http://bcferrycoder.github.com/2012/12/15/java7-comes-to-stackato"/>
   <updated>2012-12-15T00:00:00-08:00</updated>
   <id>http://bcferrycoder.github.com/2012/12/15/java7-comes-to-stackato</id>
   <content type="html">&lt;pre&gt;
DO NOT PUBLISH until:

  1. Brent signs off
  2. 2.6 prime is released
1&lt;/pre&gt;
&lt;h3 id='introduction'&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Stackato has always supported Java, but had From the very beginning Java was a core language supported has been a Stackato has had a very strong affinity with Java: out of the box most Java applications can be successfully pushed to a Stackato cluster with no modification.&lt;/p&gt;

&lt;p&gt;But without &lt;a href='&amp;quot;http://buildpacks-blog.activestate.com&amp;quot;'&gt;buildpacks&lt;/a&gt; the choice of Java runtimes has thus far been limited to exactly one: Java 6 (nee jdk1.6) which until recently was the most widely used Java release, and certainly the best choice. But last week Java 6 turned the healthy age of six which, I hate to say it, seems &lt;strong&gt;old&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Oracle released Java SE 7 (codename Dolphin) July 2011, mere months after it assimilated Sun. While the initial reception to Java 7 didn&amp;#8217;t seem as enthusiastic it was for as previous releases, adoption is now rapidly gaining momentum. In fact, according to &lt;a href='http://blog.jelastic.com/2012/12/06/software-stacks-market-share-november-2012/'&gt;jelastic&lt;/a&gt;, Java7 is now the number one choice of Java version on their stack (not a terribly meaningful sample size, but probably it&amp;#8217;s an indicator).&lt;/p&gt;

&lt;p&gt;So the time is ripe for Stackato and Java 7 to join forces, and as of this week they have done so: the latest Stackato release (???) now includes Java 7 in its list of core runtimes, easily selectable at when an application is deployed.&lt;/p&gt;

&lt;p&gt;Here we&amp;#8217;ll look at some of the additional features provided by Java 7, and step through deploying a small Java Web application to Stackato, to both of the supported runtimes.&lt;/p&gt;

&lt;h3 id='java_7_a_rocky_start'&gt;Java 7: A Rocky Start&lt;/h3&gt;

&lt;p&gt;Shortly after the first release of Java 7 a number of serious bugs surfaced that resulted in such undesirable outcomes as file corruption, major performance hits, and &amp;#8220;incorrect&amp;#8221; loop execution. Scathing articles warned (using words like &amp;#8220;dangerous&amp;#8221; and &amp;#8220;frightening&amp;#8221;) to stay away from Java 7 until its shortcomings were fixed, or to quote one indignant blogger, don&amp;#8217;t use Java 7 for anything unless you know you don&amp;#8217;t have any loops in your java code&amp;#8221;&lt;/p&gt;

&lt;p&gt;Furthermore Oracle significantly reduced the scope of this release which had originally called for innovative features like closures, native XML support, collection literals. Sadly none of these (and quite a few others) made the cut: instead they&amp;#8217;re being pushed to Java 8.&lt;/p&gt;

&lt;h3 id='so_what_did_make_it_in'&gt;So What Did Make it In?&lt;/h3&gt;

&lt;p&gt;As with every major Java release to date, Java 7 claims considerable improvements in performance and security. These alone may be enough to encourage the move to Java7. (We&amp;#8217;ll see about performance shortly).&lt;/p&gt;

&lt;p&gt;Java 7 also introduces a handful of language enhancements, mostly syntactic sugar, but something Java could use more of as they help help improve the expressiveness, conciseness, readability, and maintainability of Java. These are a subset of JSR XXX, known as &amp;#8220;Project Coin,&amp;#8221; and include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The switch statement now allows strings&lt;/li&gt;

&lt;li&gt;Binary literals are supported&lt;/li&gt;

&lt;li&gt;Multiple exceptions can be caught in one statement&lt;/li&gt;

&lt;li&gt;Rudimentary type inference is now supported by the so-called &amp;#8220;diamond&amp;#8221; operator&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are some new and improved features too:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a new File I/O API with better and faster handling of directories and concurrency&lt;/li&gt;

&lt;li&gt;a revamped garbage collector with higher throughput&lt;/li&gt;

&lt;li&gt;initial work on modularizing the increasingly bloated Java release&lt;/li&gt;

&lt;li&gt;enhancements to the JVM to better support dynamic languages&lt;/li&gt;

&lt;li&gt;a new fork/join concurrency framework for hardware parallelism&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='why_upgrade'&gt;Why Upgrade?&lt;/h3&gt;

&lt;p&gt;At first I was underwhelmed by the new features of this release (and I admit I was/am still lamenting the exclusion of closures). If the new features (file, fork/join, etc.) aren&amp;#8217;t specifically needed, is it really worth an upgrade just for the minimal language enhancements?&lt;/p&gt;

&lt;p&gt;But that&amp;#8217;s not taking performance into account. If performance is a concern (isn&amp;#8217;t it always?), it&amp;#8217;s certainly worthwhile considering and evaluating an upgrade.&lt;/p&gt;

&lt;p&gt;So let&amp;#8217;s do exactly that: here I&amp;#8217;ll use Stackato to deploy a rudimentary benchmark to two application instances, one running Java 6, the other running Java 7.&lt;/p&gt;

&lt;p&gt;Before looking at the application code itself, I&amp;#8217;ll list the additional steps (actually just one single step) to choose that an application use Java 7 instead of Java 6.&lt;/p&gt;

&lt;h3 id='the_deployment_descriptor__manifest'&gt;The Deployment Descriptor / Manifest&lt;/h3&gt;

&lt;p&gt;Stackato is good at deducing the runtime and framework required for a given application, but we recommend including a manifest file (stackato.yml) with each app to fully specify its characteristics and requirements.&lt;/p&gt;

&lt;p&gt;For our simple benchmark application, which I&amp;#8217;ll build as a Java Web app, the &amp;#8220;stackato.yml&amp;#8221; file looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;name:   benchmark-java
framework:
    type: java_web
mem: 1024M&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No Java version is mentioned, so the default Java 6 is used.&lt;/p&gt;

&lt;p&gt;To use Java 7, add a single line runtime directive:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;name:   benchmark-java7
framework:
    type: java_web
    runtime: java7
mem: 1024M&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='back_to_performance_improvements'&gt;Back to performance Improvements&lt;/h3&gt;

&lt;p&gt;How much faster is Java 7 anyway? I could ask around (google might know) but instead I&amp;#8217;ll try to find a simple benchmark to run on both.&lt;/p&gt;

&lt;p&gt;A quick search rewarded me with a simple Java &lt;a href='http://math.nist.gov/scimark2/'&gt;benchmark&lt;/a&gt; that should further the quest. This code is simple to understand (at a high level anyway), and is trivial to wrap into a class, which I&amp;#8217;ll call &lt;strong&gt;JavaBench&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I simply added a few lines to my basic servlet that invoke JavaBench.bench() and print the result.&lt;/p&gt;

&lt;p&gt;Then it&amp;#8217;s a simple matter of building the app and pushing to the Stackato cluster.&lt;/p&gt;

&lt;p&gt;Using maven the steps are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;mvn clean package&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;add the stackato.yml file from above&lt;/p&gt;

&lt;p&gt;name: benchmark-java6 framework: type: java_web runtime: java6 mem: 1024M&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;stackato push -n&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wait for the deploy to complete, and note the URL that&amp;#8217;s displayed. Visiting this in a browser results in a page that shows the benchmark results as well as the Java version.&lt;/p&gt;

&lt;h3 id='that_was_java_6_now_try_java_7'&gt;That was Java 6, now try Java 7&lt;/h3&gt;

&lt;p&gt;I want to deploy both apps into a single Stackato cluster, which can be easily accomplished by changing the name and the runtime in the stackato.yml file and redeploying:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# updated stackato.yml
name:   benchmark-java7
framework:
    type: java_web
    runtime: java7
mem: 1024M


$ stackato push -n&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now both apps are shown in the output of &amp;#8220;stackato apps&amp;#8221;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ stackato apps

+-------------+---+---------+---------------------------------+----------+
| Application | # | Health  | URLS                            | Services |
+----------------+----------+---------------------------------+----------+
| bench-java6 | 1 | RUNNING | bench-java6.stackato-d6jy.local |          |
| bench-java7 | 1 | RUNNING | bench-java7.stackato-d6jy.local |          |
+-------------+---+---------+---------------------------------+----------+&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now visit the &lt;a href='j7.stackato-d6jy.local'&gt;j7.stackato-d6jy.local&lt;/a&gt; and observe the results.&lt;/p&gt;

&lt;p&gt;Well what do you know - Java 7 &lt;strong&gt;is&lt;/strong&gt; faster. (At least it&amp;#8217;s faster according to this limited numerically intensive benchmark &amp;#8211; your mileage will vary).&lt;/p&gt;

&lt;h4 id='other_frameworks'&gt;Other Frameworks&lt;/h4&gt;

&lt;p&gt;By the same procedure (adding a runtime directive to stackato.yml) applications built with the Spring, Play, Java_EE, and Grails can also run with Java 7 SE.&lt;/p&gt;

&lt;h4 id='summary'&gt;Summary&lt;/h4&gt;

&lt;p&gt;This was is a long-winded way of saying that Stackato now supports Java 7. Java 7 and Java 6 applications&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>VM Sizing with Java7</title>
   <link href="http://bcferrycoder.github.com/2012/12/14/vm-sizing-with-java7"/>
   <updated>2012-12-14T00:00:00-08:00</updated>
   <id>http://bcferrycoder.github.com/2012/12/14/vm-sizing-with-java7</id>
   <content type="html">&lt;table border='3' width='60%'&gt;
&lt;tr&gt;
&lt;th&gt;Configuration&lt;/th&gt;
&lt;th&gt;Zip size&lt;/th&gt;
&lt;th&gt;Exploded size&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;java6 with jre/jdk&lt;/td&gt;
&lt;td&gt;1.4710GB&lt;/td&gt;
&lt;td&gt;4.8400GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;java6/java7 with jre only&lt;/td&gt;
&lt;td&gt;1.4846GB&lt;/td&gt;
&lt;td&gt;4.8197GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;java6/java7 with jre/jdk&lt;/td&gt;
&lt;td&gt;1.5378GB&lt;/td&gt;
&lt;td&gt;4.9356GB&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</content>
 </entry>
 
 <entry>
   <title>ActiveState South</title>
   <link href="http://bcferrycoder.github.com/2012/12/12/activestate-south"/>
   <updated>2012-12-12T00:00:00-08:00</updated>
   <id>http://bcferrycoder.github.com/2012/12/12/activestate-south</id>
   <content type="html">&lt;p&gt;Welcome to ActiveState South&lt;/p&gt;

&lt;p&gt;For the last year, with his south-facing office, Toph has had complete dominion over &amp;#8220;ActiveState South&amp;#8221;, but I&amp;#8217;m obliged to report that last week the ActiveState Silicon Valley Branch (i.e., Paul and I) have taken over this prestigious role and have moved into our new digs at the &lt;strong&gt;real&lt;/strong&gt; ActiveState South in Santa Clara:&lt;/p&gt;

&lt;p&gt;ActiveState South 3200 Coronado Drive, Santa Clara, CA 9054&lt;/p&gt;

&lt;p&gt;http://goo.gl/maps/t4rgr&lt;/p&gt;

&lt;p&gt;This new office is at a great location, smack dab in the core of the Silicon Valley, about 10 minutes from Google, LinkedIn, Ebay, and Facebook.&lt;/p&gt;

&lt;p&gt;More relavent to us, our new office is 5 minutes from both the San Jose Airport and from the Santa Clara Convention Center.&lt;/p&gt;

&lt;p&gt;Interestingly, many of the other tenents are focused on Cloud Computing, and the building itself is a perfect venue for meetups with room for around 200 attendees. We&amp;#8217;re welcome to hold our own events here too, and I suspect we will be soon.&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;re in the area let me or Paul know and we can set you up with somewhere to hang your hat.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>IDEA and Stackato</title>
   <link href="http://bcferrycoder.github.com/2012/12/06/idea-and-stackato"/>
   <updated>2012-12-06T00:00:00-08:00</updated>
   <id>http://bcferrycoder.github.com/2012/12/06/idea-and-stackato</id>
   <content type="html">&lt;p&gt;Intellij 12 came out today. I&amp;#8217;ve been looking forward to this release, but that&amp;#8217;s not saying much as I look forward to every release of this amazing tool.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m somewhat of an IDE-freak, and over the years have put many miles on each of the three main Java IDEs: NetBeans, Eclipse, Intellij IDEA.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s hard to believe such a great product can just keep getting better, but it never seems to fail doing so.&lt;/p&gt;

&lt;p&gt;Integrating tools with the cloud&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Deploy Stackato 2.6.6 to CloudStack</title>
   <link href="http://bcferrycoder.github.com/2012/12/06/deploy-stackato-266-to-cloudstack"/>
   <updated>2012-12-06T00:00:00-08:00</updated>
   <id>http://bcferrycoder.github.com/2012/12/06/deploy-stackato-266-to-cloudstack</id>
   <content type="html">&lt;h3 id='deploying_stackato_266_to_cloudstack'&gt;Deploying Stackato 2.6.6 to CloudStack&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Download the Stackato 2.6.6 VMWare VMDK image&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Use &lt;a href='http://www.banym.de/mac/installing-vmware-ovftool-on-mac-os-x'&gt;VMWare&amp;#8217;s OVF Tool&lt;/a&gt; to convert the image:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;b&gt;
      /Applications/VMware\ OVF\ Tool/ovftool \
           stackato-v2.6.6.vmwarevm/stackato-v2.6.6.vmx \ 
            stackato-v266.ova
&lt;/b&gt;&lt;/pre&gt;
&lt;p&gt;This tool infers the output format by the file extension (.ova in this case).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Place this new .ova file somewhere &amp;#8220;on the internet&amp;#8221; and make sure the file is accessible via a public non-ssl URL. Dropbox works fine.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Citrix has provided us with CloudStack instance use. Here are the details:&lt;/p&gt;

&lt;p&gt;&lt;a href='http://72.52.126.26/client/'&gt;endpoint url: http://72.52.126.26/client/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;user: activestate pw: 4ct1v3st4t3#@! domain: test/activestate&lt;/p&gt;

&lt;p&gt;api key VrHIIdgHLF8cYxdLr_nPgI9qI_5WvSliRhsw6qSaP0HFFf8D0O1DMA2Facee_vQSJwSRrwmYdZr4jdc2LGGD1A&lt;/p&gt;

&lt;p&gt;secret key 3yXorzdskLbPBYvHXSkvA-GqPaEk1oP9Se3hrD6XS5cYcWiOoY7oWaw7-JcsqCBl13Fty490B2Vbpe9Dgr1Qlg&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Login to the above &lt;a href='http://72.52.126.26/client/'&gt;endpoint&lt;/a&gt; with the above credentials.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Click Template -&amp;gt; Create Template&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Fill out the panel as follows:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;8.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Table Of Contents</title>
   <link href="http://bcferrycoder.github.com/2012/11/29/table-of-contents"/>
   <updated>2012-11-29T00:00:00-08:00</updated>
   <id>http://bcferrycoder.github.com/2012/11/29/table-of-contents</id>
   <content type="html">&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
  &amp;lt;div style=&amp;quot;position:absolute;left:1350px;font-size:16px;&amp;quot; class=&amp;quot;span4&amp;quot;&amp;gt;
    &amp;lt;h4 style=&amp;quot;color: #2277FF;&amp;quot;&amp;gt;BCFerryCoder Posts&amp;lt;/h4&amp;gt;

&amp;lt;ul style=&amp;quot;margin-left:0px;list-style:none;&amp;quot; class=&amp;quot;posts&amp;quot;&amp;gt;

  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2013/01/02/barriers-to-entry&amp;quot;&amp;gt;Barriers to Entry&amp;lt;/a&amp;gt;&amp;amp;nbsp;02 Jan 2013&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/barrier reef&amp;quot;&amp;gt;barrier reef&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/25/syntax-highlighting&amp;quot;&amp;gt;syntax highlighting&amp;lt;/a&amp;gt;&amp;amp;nbsp;25 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/blog&amp;quot;&amp;gt;blog&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/tips&amp;quot;&amp;gt;tips&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/25/syntax-highlighting&amp;quot;&amp;gt;syntax highlighting&amp;lt;/a&amp;gt;&amp;amp;nbsp;25 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/blog&amp;quot;&amp;gt;blog&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/tips&amp;quot;&amp;gt;tips&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/23/enterprise-in-a-basement&amp;quot;&amp;gt;Enterprise in a Basement&amp;lt;/a&amp;gt;&amp;amp;nbsp;23 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/enterprise&amp;quot;&amp;gt;enterprise&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/basement&amp;quot;&amp;gt;basement&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/23/enterprise-in-a-basement&amp;quot;&amp;gt;Enterprise in a Basement&amp;lt;/a&amp;gt;&amp;amp;nbsp;23 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/enterprise&amp;quot;&amp;gt;enterprise&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/basement&amp;quot;&amp;gt;basement&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/21/deo-vision&amp;quot;&amp;gt;The Big Demo: Enterprise-Hardy Stackato POC&amp;lt;br /&amp;gt;&amp;lt;/a&amp;gt;&amp;amp;nbsp;21 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/demo&amp;quot;&amp;gt;demo&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/lightning&amp;quot;&amp;gt;lightning&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/camelot&amp;quot;&amp;gt;camelot&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/21/deo-vision&amp;quot;&amp;gt;The Big Demo: Enterprise-Hardy Stackato POC&amp;lt;br /&amp;gt;&amp;lt;/a&amp;gt;&amp;amp;nbsp;21 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/demo&amp;quot;&amp;gt;demo&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/lightning&amp;quot;&amp;gt;lightning&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/camelot&amp;quot;&amp;gt;camelot&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/21/deo-vision&amp;quot;&amp;gt;The Big Demo: Enterprise-Hardy Stackato POC&amp;lt;br /&amp;gt;&amp;lt;/a&amp;gt;&amp;amp;nbsp;21 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/demo&amp;quot;&amp;gt;demo&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/lightning&amp;quot;&amp;gt;lightning&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/camelot&amp;quot;&amp;gt;camelot&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/21/deo-vision&amp;quot;&amp;gt;The Big Demo: Enterprise-Hardy Stackato POC&amp;lt;br /&amp;gt;&amp;lt;/a&amp;gt;&amp;amp;nbsp;21 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/demo&amp;quot;&amp;gt;demo&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/lightning&amp;quot;&amp;gt;lightning&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/camelot&amp;quot;&amp;gt;camelot&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/15/thinking-out-of-the-auto-box&amp;quot;&amp;gt;Thinking outside the Auto Box&amp;lt;/a&amp;gt;&amp;amp;nbsp;15 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;Java 8 helps fix an annoying and costly Java feature
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java8&amp;quot;&amp;gt;java8&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/autobox&amp;quot;&amp;gt;autobox&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/annoying&amp;quot;&amp;gt;annoying&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/15/thinking-out-of-the-auto-box&amp;quot;&amp;gt;Thinking outside the Auto Box&amp;lt;/a&amp;gt;&amp;amp;nbsp;15 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;Java 8 helps fix an annoying and costly Java feature
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java8&amp;quot;&amp;gt;java8&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/autobox&amp;quot;&amp;gt;autobox&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/annoying&amp;quot;&amp;gt;annoying&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/15/thinking-out-of-the-auto-box&amp;quot;&amp;gt;Thinking outside the Auto Box&amp;lt;/a&amp;gt;&amp;amp;nbsp;15 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;Java 8 helps fix an annoying and costly Java feature
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java8&amp;quot;&amp;gt;java8&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/autobox&amp;quot;&amp;gt;autobox&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/annoying&amp;quot;&amp;gt;annoying&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/15/thinking-out-of-the-auto-box&amp;quot;&amp;gt;Thinking outside the Auto Box&amp;lt;/a&amp;gt;&amp;amp;nbsp;15 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;Java 8 helps fix an annoying and costly Java feature
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java8&amp;quot;&amp;gt;java8&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/autobox&amp;quot;&amp;gt;autobox&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/annoying&amp;quot;&amp;gt;annoying&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/15/java7-comes-to-stackato&amp;quot;&amp;gt;Java7 Comes to Stackato&amp;lt;/a&amp;gt;&amp;amp;nbsp;15 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java7&amp;quot;&amp;gt;java7&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato runtime&amp;quot;&amp;gt;stackato runtime&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/15/java7-comes-to-stackato&amp;quot;&amp;gt;Java7 Comes to Stackato&amp;lt;/a&amp;gt;&amp;amp;nbsp;15 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java7&amp;quot;&amp;gt;java7&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato runtime&amp;quot;&amp;gt;stackato runtime&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/15/java7-comes-to-stackato&amp;quot;&amp;gt;Java7 Comes to Stackato&amp;lt;/a&amp;gt;&amp;amp;nbsp;15 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java7&amp;quot;&amp;gt;java7&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato runtime&amp;quot;&amp;gt;stackato runtime&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/14/vm-sizing-with-java7&amp;quot;&amp;gt;VM Sizing with Java7&amp;lt;/a&amp;gt;&amp;amp;nbsp;14 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/vm&amp;quot;&amp;gt;vm&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/sizing&amp;quot;&amp;gt;sizing&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/14/vm-sizing-with-java7&amp;quot;&amp;gt;VM Sizing with Java7&amp;lt;/a&amp;gt;&amp;amp;nbsp;14 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/vm&amp;quot;&amp;gt;vm&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/sizing&amp;quot;&amp;gt;sizing&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/14/vm-sizing-with-java7&amp;quot;&amp;gt;VM Sizing with Java7&amp;lt;/a&amp;gt;&amp;amp;nbsp;14 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/vm&amp;quot;&amp;gt;vm&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/sizing&amp;quot;&amp;gt;sizing&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/12/activestate-south&amp;quot;&amp;gt;ActiveState South&amp;lt;/a&amp;gt;&amp;amp;nbsp;12 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/activestate&amp;quot;&amp;gt;activestate&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/chat&amp;quot;&amp;gt;chat&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/12/activestate-south&amp;quot;&amp;gt;ActiveState South&amp;lt;/a&amp;gt;&amp;amp;nbsp;12 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/activestate&amp;quot;&amp;gt;activestate&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/chat&amp;quot;&amp;gt;chat&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/06/idea-and-stackato&amp;quot;&amp;gt;IDEA and Stackato&amp;lt;/a&amp;gt;&amp;amp;nbsp;06 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/ide&amp;quot;&amp;gt;ide&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/intellij&amp;quot;&amp;gt;intellij&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/idea&amp;quot;&amp;gt;idea&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/06/idea-and-stackato&amp;quot;&amp;gt;IDEA and Stackato&amp;lt;/a&amp;gt;&amp;amp;nbsp;06 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/ide&amp;quot;&amp;gt;ide&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/intellij&amp;quot;&amp;gt;intellij&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/idea&amp;quot;&amp;gt;idea&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/06/idea-and-stackato&amp;quot;&amp;gt;IDEA and Stackato&amp;lt;/a&amp;gt;&amp;amp;nbsp;06 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/ide&amp;quot;&amp;gt;ide&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/intellij&amp;quot;&amp;gt;intellij&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/idea&amp;quot;&amp;gt;idea&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/06/idea-and-stackato&amp;quot;&amp;gt;IDEA and Stackato&amp;lt;/a&amp;gt;&amp;amp;nbsp;06 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/ide&amp;quot;&amp;gt;ide&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/intellij&amp;quot;&amp;gt;intellij&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/idea&amp;quot;&amp;gt;idea&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/06/idea-and-stackato&amp;quot;&amp;gt;IDEA and Stackato&amp;lt;/a&amp;gt;&amp;amp;nbsp;06 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/ide&amp;quot;&amp;gt;ide&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/intellij&amp;quot;&amp;gt;intellij&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/idea&amp;quot;&amp;gt;idea&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/06/deploy-stackato-266-to-cloudstack&amp;quot;&amp;gt;Deploy Stackato 2.6.6 to CloudStack&amp;lt;/a&amp;gt;&amp;amp;nbsp;06 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/deploy&amp;quot;&amp;gt;deploy&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/cloudstack&amp;quot;&amp;gt;cloudstack&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/06/deploy-stackato-266-to-cloudstack&amp;quot;&amp;gt;Deploy Stackato 2.6.6 to CloudStack&amp;lt;/a&amp;gt;&amp;amp;nbsp;06 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/deploy&amp;quot;&amp;gt;deploy&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/cloudstack&amp;quot;&amp;gt;cloudstack&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/12/06/deploy-stackato-266-to-cloudstack&amp;quot;&amp;gt;Deploy Stackato 2.6.6 to CloudStack&amp;lt;/a&amp;gt;&amp;amp;nbsp;06 Dec 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/deploy&amp;quot;&amp;gt;deploy&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/cloudstack&amp;quot;&amp;gt;cloudstack&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/11/26/sidebars&amp;quot;&amp;gt;sidebars&amp;lt;/a&amp;gt;&amp;amp;nbsp;26 Nov 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/scratch&amp;quot;&amp;gt;scratch&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/11/26/java&amp;quot;&amp;gt;Java&amp;lt;/a&amp;gt;&amp;amp;nbsp;26 Nov 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/scratch&amp;quot;&amp;gt;scratch&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/11/26/ha-ha-ha&amp;quot;&amp;gt;High Availability&amp;lt;/a&amp;gt;&amp;amp;nbsp;26 Nov 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/high&amp;quot;&amp;gt;high&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/availability&amp;quot;&amp;gt;availability&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/ha&amp;quot;&amp;gt;ha&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/11/26/ha-ha-ha&amp;quot;&amp;gt;High Availability&amp;lt;/a&amp;gt;&amp;amp;nbsp;26 Nov 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/high&amp;quot;&amp;gt;high&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/availability&amp;quot;&amp;gt;availability&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/ha&amp;quot;&amp;gt;ha&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/11/26/ha-ha-ha&amp;quot;&amp;gt;High Availability&amp;lt;/a&amp;gt;&amp;amp;nbsp;26 Nov 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/high&amp;quot;&amp;gt;high&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/availability&amp;quot;&amp;gt;availability&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/ha&amp;quot;&amp;gt;ha&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/11/26/blog-ttd&amp;quot;&amp;gt;Blog TTD&amp;lt;/a&amp;gt;&amp;amp;nbsp;26 Nov 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/blog&amp;quot;&amp;gt;blog&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/11/25/convergence-as-a-service&amp;quot;&amp;gt;Convergence as a Service&amp;lt;/a&amp;gt;&amp;amp;nbsp;25 Nov 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/cloud&amp;quot;&amp;gt;cloud&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/convergence&amp;quot;&amp;gt;convergence&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/aaS&amp;quot;&amp;gt;aaS&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/service&amp;quot;&amp;gt;service&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/11/25/convergence-as-a-service&amp;quot;&amp;gt;Convergence as a Service&amp;lt;/a&amp;gt;&amp;amp;nbsp;25 Nov 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/cloud&amp;quot;&amp;gt;cloud&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/convergence&amp;quot;&amp;gt;convergence&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/aaS&amp;quot;&amp;gt;aaS&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/service&amp;quot;&amp;gt;service&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/11/25/convergence-as-a-service&amp;quot;&amp;gt;Convergence as a Service&amp;lt;/a&amp;gt;&amp;amp;nbsp;25 Nov 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/cloud&amp;quot;&amp;gt;cloud&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/convergence&amp;quot;&amp;gt;convergence&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/aaS&amp;quot;&amp;gt;aaS&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/service&amp;quot;&amp;gt;service&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/11/25/convergence-as-a-service&amp;quot;&amp;gt;Convergence as a Service&amp;lt;/a&amp;gt;&amp;amp;nbsp;25 Nov 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/cloud&amp;quot;&amp;gt;cloud&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/convergence&amp;quot;&amp;gt;convergence&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/aaS&amp;quot;&amp;gt;aaS&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/service&amp;quot;&amp;gt;service&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/11/20/laas---logging-and-paas&amp;quot;&amp;gt;LaaS   Logging and PaaS&amp;lt;/a&amp;gt;&amp;amp;nbsp;20 Nov 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/scratch&amp;quot;&amp;gt;scratch&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/11/19/the-anatomy-of-a-buildpack&amp;quot;&amp;gt;The Anatomy of a BuildPack&amp;lt;/a&amp;gt;&amp;amp;nbsp;19 Nov 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/scratch&amp;quot;&amp;gt;scratch&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/11/19/custom-ports-with-stackato&amp;quot;&amp;gt;Stackato Ports&amp;lt;/a&amp;gt;&amp;amp;nbsp;19 Nov 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/scratch&amp;quot;&amp;gt;scratch&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/11/17/top-twenty-tech-tango&amp;quot;&amp;gt;Top Twenty Tool Tryst&amp;lt;/a&amp;gt;&amp;amp;nbsp;17 Nov 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;Tools that delight
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/tools&amp;quot;&amp;gt;tools&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/11/17/camelot&amp;quot;&amp;gt;Camelot&amp;lt;/a&amp;gt;&amp;amp;nbsp;17 Nov 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/scratch&amp;quot;&amp;gt;scratch&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/11/16/play-with-stackato&amp;quot;&amp;gt;Play with Stackato&amp;lt;/a&amp;gt;&amp;amp;nbsp;16 Nov 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/scratch&amp;quot;&amp;gt;scratch&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/11/14/enough-already-as-a-service&amp;quot;&amp;gt;Convergence as a Service&amp;lt;/a&amp;gt;&amp;amp;nbsp;14 Nov 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/scratch&amp;quot;&amp;gt;scratch&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/27/ststackato&amp;quot;&amp;gt;STStackato&amp;lt;/a&amp;gt;&amp;amp;nbsp;27 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/sts&amp;quot;&amp;gt;sts&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/spring&amp;quot;&amp;gt;spring&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/ide&amp;quot;&amp;gt;ide&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/eclipse&amp;quot;&amp;gt;eclipse&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/plugin&amp;quot;&amp;gt;plugin&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/27/ststackato&amp;quot;&amp;gt;STStackato&amp;lt;/a&amp;gt;&amp;amp;nbsp;27 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/sts&amp;quot;&amp;gt;sts&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/spring&amp;quot;&amp;gt;spring&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/ide&amp;quot;&amp;gt;ide&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/eclipse&amp;quot;&amp;gt;eclipse&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/plugin&amp;quot;&amp;gt;plugin&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/27/ststackato&amp;quot;&amp;gt;STStackato&amp;lt;/a&amp;gt;&amp;amp;nbsp;27 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/sts&amp;quot;&amp;gt;sts&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/spring&amp;quot;&amp;gt;spring&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/ide&amp;quot;&amp;gt;ide&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/eclipse&amp;quot;&amp;gt;eclipse&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/plugin&amp;quot;&amp;gt;plugin&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/27/ststackato&amp;quot;&amp;gt;STStackato&amp;lt;/a&amp;gt;&amp;amp;nbsp;27 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/sts&amp;quot;&amp;gt;sts&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/spring&amp;quot;&amp;gt;spring&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/ide&amp;quot;&amp;gt;ide&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/eclipse&amp;quot;&amp;gt;eclipse&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/plugin&amp;quot;&amp;gt;plugin&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/27/ststackato&amp;quot;&amp;gt;STStackato&amp;lt;/a&amp;gt;&amp;amp;nbsp;27 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/sts&amp;quot;&amp;gt;sts&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/spring&amp;quot;&amp;gt;spring&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/ide&amp;quot;&amp;gt;ide&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/eclipse&amp;quot;&amp;gt;eclipse&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/plugin&amp;quot;&amp;gt;plugin&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/27/ststackato&amp;quot;&amp;gt;STStackato&amp;lt;/a&amp;gt;&amp;amp;nbsp;27 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/sts&amp;quot;&amp;gt;sts&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/spring&amp;quot;&amp;gt;spring&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/ide&amp;quot;&amp;gt;ide&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/eclipse&amp;quot;&amp;gt;eclipse&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/plugin&amp;quot;&amp;gt;plugin&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/27/ststackato&amp;quot;&amp;gt;STStackato&amp;lt;/a&amp;gt;&amp;amp;nbsp;27 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/sts&amp;quot;&amp;gt;sts&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/spring&amp;quot;&amp;gt;spring&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/ide&amp;quot;&amp;gt;ide&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/eclipse&amp;quot;&amp;gt;eclipse&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/plugin&amp;quot;&amp;gt;plugin&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/26/polyglot2&amp;quot;&amp;gt;polyglot&amp;lt;/a&amp;gt;&amp;amp;nbsp;26 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/scratch&amp;quot;&amp;gt;scratch&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/24/antipattern2-bolt-on-security&amp;quot;&amp;gt;antipattern2: Bolt on Security&amp;lt;/a&amp;gt;&amp;amp;nbsp;24 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/scratch&amp;quot;&amp;gt;scratch&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/22/cambatting-software-antipatterns-with-platform-as-a-service&amp;quot;&amp;gt;Combating Software Antipatterns with Platform as a Service&amp;lt;/a&amp;gt;&amp;amp;nbsp;22 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/scratch&amp;quot;&amp;gt;scratch&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/21/polyglot&amp;quot;&amp;gt;Polyglot&amp;lt;/a&amp;gt;&amp;amp;nbsp;21 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/scratch&amp;quot;&amp;gt;scratch&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/21/enterprise-java-and-stackato&amp;quot;&amp;gt;Enterprise Java and Stackato&amp;lt;/a&amp;gt;&amp;amp;nbsp;21 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/draft&amp;quot;&amp;gt;draft&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java-stackato&amp;quot;&amp;gt;java-stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/21/enterprise-java-and-stackato&amp;quot;&amp;gt;Enterprise Java and Stackato&amp;lt;/a&amp;gt;&amp;amp;nbsp;21 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/draft&amp;quot;&amp;gt;draft&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java-stackato&amp;quot;&amp;gt;java-stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/21/enterprise-java-and-stackato&amp;quot;&amp;gt;Enterprise Java and Stackato&amp;lt;/a&amp;gt;&amp;amp;nbsp;21 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/draft&amp;quot;&amp;gt;draft&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java-stackato&amp;quot;&amp;gt;java-stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/21/enterprise-java-and-stackato&amp;quot;&amp;gt;Enterprise Java and Stackato&amp;lt;/a&amp;gt;&amp;amp;nbsp;21 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/draft&amp;quot;&amp;gt;draft&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java-stackato&amp;quot;&amp;gt;java-stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/21/combatting_draft3&amp;quot;&amp;gt;combatting_draft3&amp;lt;/a&amp;gt;&amp;amp;nbsp;21 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/scratch&amp;quot;&amp;gt;scratch&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/21/combatting_draft2&amp;quot;&amp;gt;Combatting_Draft2&amp;lt;/a&amp;gt;&amp;amp;nbsp;21 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/scratch&amp;quot;&amp;gt;scratch&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/21/anvils-and-lightbulbs&amp;quot;&amp;gt;Anvils and Lightbulbs&amp;lt;/a&amp;gt;&amp;amp;nbsp;21 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/antipatterns&amp;quot;&amp;gt;antipatterns&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/anvils&amp;quot;&amp;gt;anvils&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/lightbulbs&amp;quot;&amp;gt;lightbulbs&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/HA&amp;quot;&amp;gt;HA&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/21/anvils-and-lightbulbs&amp;quot;&amp;gt;Anvils and Lightbulbs&amp;lt;/a&amp;gt;&amp;amp;nbsp;21 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/antipatterns&amp;quot;&amp;gt;antipatterns&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/anvils&amp;quot;&amp;gt;anvils&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/lightbulbs&amp;quot;&amp;gt;lightbulbs&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/HA&amp;quot;&amp;gt;HA&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/21/anvils-and-lightbulbs&amp;quot;&amp;gt;Anvils and Lightbulbs&amp;lt;/a&amp;gt;&amp;amp;nbsp;21 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/antipatterns&amp;quot;&amp;gt;antipatterns&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/anvils&amp;quot;&amp;gt;anvils&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/lightbulbs&amp;quot;&amp;gt;lightbulbs&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/HA&amp;quot;&amp;gt;HA&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/18/upgrading-tomee-in-vcap&amp;quot;&amp;gt;Upgrading TomEE in vcap&amp;lt;/a&amp;gt;&amp;amp;nbsp;18 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/tomee&amp;quot;&amp;gt;tomee&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/tomcat&amp;quot;&amp;gt;tomcat&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/upgrade&amp;quot;&amp;gt;upgrade&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/vcap&amp;quot;&amp;gt;vcap&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/18/upgrading-tomee-in-vcap&amp;quot;&amp;gt;Upgrading TomEE in vcap&amp;lt;/a&amp;gt;&amp;amp;nbsp;18 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/tomee&amp;quot;&amp;gt;tomee&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/tomcat&amp;quot;&amp;gt;tomcat&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/upgrade&amp;quot;&amp;gt;upgrade&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/vcap&amp;quot;&amp;gt;vcap&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/18/upgrading-tomee-in-vcap&amp;quot;&amp;gt;Upgrading TomEE in vcap&amp;lt;/a&amp;gt;&amp;amp;nbsp;18 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/tomee&amp;quot;&amp;gt;tomee&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/tomcat&amp;quot;&amp;gt;tomcat&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/upgrade&amp;quot;&amp;gt;upgrade&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/vcap&amp;quot;&amp;gt;vcap&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/18/upgrading-tomee-in-vcap&amp;quot;&amp;gt;Upgrading TomEE in vcap&amp;lt;/a&amp;gt;&amp;amp;nbsp;18 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/tomee&amp;quot;&amp;gt;tomee&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/tomcat&amp;quot;&amp;gt;tomcat&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/upgrade&amp;quot;&amp;gt;upgrade&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/vcap&amp;quot;&amp;gt;vcap&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/18/upgrading-tomee-in-vcap&amp;quot;&amp;gt;Upgrading TomEE in vcap&amp;lt;/a&amp;gt;&amp;amp;nbsp;18 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/tomee&amp;quot;&amp;gt;tomee&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/tomcat&amp;quot;&amp;gt;tomcat&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/upgrade&amp;quot;&amp;gt;upgrade&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/vcap&amp;quot;&amp;gt;vcap&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/18/upgrading-tomee-in-vcap&amp;quot;&amp;gt;Upgrading TomEE in vcap&amp;lt;/a&amp;gt;&amp;amp;nbsp;18 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/tomee&amp;quot;&amp;gt;tomee&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/tomcat&amp;quot;&amp;gt;tomcat&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/java&amp;quot;&amp;gt;java&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/stackato&amp;quot;&amp;gt;stackato&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/upgrade&amp;quot;&amp;gt;upgrade&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/vcap&amp;quot;&amp;gt;vcap&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/10/17/combatting-antipatterns-with-paas&amp;quot;&amp;gt;Combatting Antipatterns with PaaS&amp;lt;/a&amp;gt;&amp;amp;nbsp;17 Oct 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/scratch&amp;quot;&amp;gt;scratch&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/09/16/strategies-for-success&amp;quot;&amp;gt;Strategies for Success&amp;lt;/a&amp;gt;&amp;amp;nbsp;16 Sep 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/scratch&amp;quot;&amp;gt;scratch&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  
  
  
    &amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&amp;lt;a href=&amp;quot;/2012/09/16/enterprise-disintegration-patterns&amp;quot;&amp;gt;Enterprise Disintegration Antipatterns&amp;lt;/a&amp;gt;&amp;amp;nbsp;16 Sep 2012&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;p class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;ul class=&amp;quot;tag_list&amp;quot;&amp;gt;
      
      &amp;lt;li class=&amp;quot;inline archive_list&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;tag_list_link&amp;quot; href=&amp;quot;/tag/scratch&amp;quot;&amp;gt;scratch&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      
    &amp;lt;/ul&amp;gt;
  
  
  

&amp;lt;/ul&amp;gt;&lt;/pre&gt;&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
  &amp;lt;/div&amp;gt;&lt;/pre&gt;&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;/div&amp;gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>sidebars</title>
   <link href="http://bcferrycoder.github.com/2012/11/26/sidebars"/>
   <updated>2012-11-26T00:00:00-08:00</updated>
   <id>http://bcferrycoder.github.com/2012/11/26/sidebars</id>
   <content type="html">&lt;h3 id='characteristics'&gt;Characteristics&lt;/h3&gt;

&lt;h3 id='best_practices'&gt;Best Practices&lt;/h3&gt;

&lt;h3 id='antipatterns'&gt;Antipatterns&lt;/h3&gt;

&lt;p&gt;portable monitorable integrated managed? maintainable rapid development rich, web-based UI productive for developers&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;multiple interacting layers and components
multiple languages, frameworks, libraries, and toolsets
clearly defined and measurable scaling strategy
strong auditable security with countermeasures across all relevant layers
strict auth requirements, elaborate roles, acls, sso
centralized logging
massive data requirements (tmi)
message-based
database centric 
realtime health, performance, and intrusion monitoring
integration complexity (EIP)
service levels, responsiveness and strict performance and reliability criteria
external api (often http-based) to expose entities and behavior
multiple ports and communications channels
notifications and email delivery to user and system
extensive services interaction
batch and offline operation
extensitve test capability
multiple language and locale support
multitenancy
integrated and comprehensive auditing facilities
mobile aspect
portable (what&amp;#39;s this mean)
comprehensable and maintainable codebase and technology stack
productive for developers
rich web-based UI&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also:&lt;/p&gt;

&lt;p&gt;process deployment CI/ Continuous Delivery Monitoring Logging&lt;/p&gt;

&lt;p&gt;SIZEBAR &lt;strong&gt;Maven&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Apache maven is a powerful dependency and build manager that has had significant impact on development of open source java apps. It favors &amp;#8220;convention-over-configuration&amp;#8221; which saves considerable ramp-up time. Its dependency and artifact management systems allow all dependencies to be completely specified in a single manifest file, so app can be built, tested, deployed, and run with a simple and consistent command set.&lt;/p&gt;

&lt;p&gt;Maven support in Stackto comes in the form of Heroko build-packs (see below.) But it&amp;#8217;s worth noting that if maven produces an artifact that&lt;/p&gt;

&lt;p&gt;Stackato understands (i.e., framework listed in this article) then a common approach is to build the app with maven locally, then push the resulting app to stackato.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Java</title>
   <link href="http://bcferrycoder.github.com/2012/11/26/java"/>
   <updated>2012-11-26T00:00:00-08:00</updated>
   <id>http://bcferrycoder.github.com/2012/11/26/java</id>
   <content type="html">&lt;p&gt;Hello Java&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>High Availability</title>
   <link href="http://bcferrycoder.github.com/2012/11/26/ha-ha-ha"/>
   <updated>2012-11-26T00:00:00-08:00</updated>
   <id>http://bcferrycoder.github.com/2012/11/26/ha-ha-ha</id>
   <content type="html">&lt;p&gt;I have been talking to lots of people about Stackato recently. A hot topic of conversion is HA. Here I&amp;#8217;ll cover a few of the hot points, in a Q&amp;amp;A format.&lt;/p&gt;

&lt;p&gt;HIGH AVAILABILITY&lt;/p&gt;

&lt;h3 id='how_many_nodes_do_we_support'&gt;How many nodes do we support&lt;/h3&gt;

&lt;h3 id='how_seamless_and_flexible_is_the_process_to_add_additional_nodes'&gt;How seamless and flexible is the process to add additional nodes?&lt;/h3&gt;

&lt;p&gt;Node management is simple, see the &lt;a href='http://docs.stackato.com/cluster/index.html'&gt;kato docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Specifically, the &lt;strong&gt;kato&lt;/strong&gt; command is used to attach additional nodes, migrate existing nodes, configure network parameters, move containers, application droplets, or services, and to manage node and cluster lifecycle.&lt;/p&gt;

&lt;h3 id='are_the_ha_parameterscharacteristics_tunable'&gt;Are the HA parameters/characteristics &amp;#8220;tunable&amp;#8221;?&lt;/h3&gt;

&lt;p&gt;The HA characterists are &amp;#8220;tuned&amp;#8221; by adding more redundancy into the system via additional nodes.&lt;/p&gt;

&lt;h3 id='how_is_it_guaranteed_that_multiple_app_instances_do_not_run_on_the_same_node_is_this_configurable'&gt;How is it guaranteed that multiple app instances do not run on the same node? Is this configurable?&lt;/h3&gt;

&lt;p&gt;There is no such guarantee at this time. Pease contact us if this is a requirement.&lt;/p&gt;

&lt;h3 id='how_automated_is_the_stackato_the_ha_mechanism'&gt;How automated is the Stackato the HA mechanism?&lt;/h3&gt;

&lt;p&gt;Fully automatic. Whether you have multiple DEAs, CCs, stagers, etc., Stackato will transparently handle the failure of any without noticeable service interruption.&lt;/p&gt;

&lt;p&gt;They could also be trying to identify high availability strategies for the data services. Although I&amp;#8217;ve implemented HA Postgres/MySQL clusters to use with Stackato before, it was a manual process to set those up and plug them into Stackato. Advanced DB HA techniques like sharding and shared-nothing type setups are somewhat unsupported in Stackato but can integrated once setup by the customer.&lt;/p&gt;
&lt;div class='faq'&gt;
&lt;span class='question'&gt;Can DEAs be moved on the fly from one node to another?&lt;/span&gt;

&lt;span class='answer'&gt;&quot;kato disable dea&quot; on one node, &quot;kato enable dea&quot; on another,
just like any other Stackato component.&lt;/span&gt;
&lt;/div&gt;
&lt;h3 id='can_nodes_span_multiple_datacenters_and_survive_a_complete_datacenter_outage'&gt;Can nodes span multiple datacenters and survive a complete datacenter outage?&lt;/h3&gt;

&lt;p&gt;This is not supported.&lt;/p&gt;

&lt;h3 id='what_is_the_health_manager_monitoring_specifically_can_it_monitor_at_the_app_layer'&gt;What is the health manager monitoring? Specifically can it monitor at the app layer.&lt;/h3&gt;

&lt;p&gt;Monitors state of apps. It watches to make sure as many instances of each app are running as needed, and starts up additional instances if any go down. Yes, it operates at the app layer.&lt;/p&gt;

&lt;p&gt;I have been asked this question several times before as well, and my response is that it checks the web PID for application health. When the application instance crashes, health manager will notify cc to bring up another instance so there is minimal downtime for application crashes, if at all (if you already have multiple instances for an application).&lt;/p&gt;

&lt;h3 id='do_we_have_reference_architecture_for_ha_whitepapers_documented_performance_characteristics'&gt;Do we have reference architecture for HA? Whitepapers? Documented performance characteristics?&lt;/h3&gt;

&lt;h3 id='can_the_db_and_bus_and_other_services_be_elastically_and_automatically_scaled'&gt;Can the db and bus and other services be elastically and automatically scaled?&lt;/h3&gt;

&lt;h3 id='what_is_our_backuprecovery_strategy_and_story_if_any_whitepaper'&gt;What is our backup/recovery strategy and story, if any? Whitepaper?&lt;/h3&gt;

&lt;p&gt;+1 to export/import as backup strategy. I offered that as a response to most people and most are okay with it. Although some want a snapshot capability on a per app basis (backup of an app) and I don&amp;#8217;t believe that is available.&lt;/p&gt;

&lt;p&gt;With regards to recovery, long ago before Stackato is as scalable as it is today, we have suggested multiple cluster (active/passive cluster) as an option for DR strategy. Very few people buy into this idea as there will be challenges syncing data, and really a waste of resources to have a passive cluster. As such, we have punted this to an infrastructure decision because there are already proven DR solution at the infrastructure layer. This is not to say that we should ignore DR related requests. We probably need a good story for a DR solution. To that, Brent, please let us know your take on this.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Blog TTD</title>
   <link href="http://bcferrycoder.github.com/2012/11/26/blog-ttd"/>
   <updated>2012-11-26T00:00:00-08:00</updated>
   <id>http://bcferrycoder.github.com/2012/11/26/blog-ttd</id>
   <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;own the style, whiteboard prototype&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;blogroll&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;recent posts&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;tags&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;sidebars&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;title not showing up&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;work out titles: what&amp;#8217;s displayed for each post (&amp;#8220;On the Road with PaaS etc)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;format for ipad&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;9.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Convergence as a Service</title>
   <link href="http://bcferrycoder.github.com/2012/11/25/convergence-as-a-service"/>
   <updated>2012-11-25T00:00:00-08:00</updated>
   <id>http://bcferrycoder.github.com/2012/11/25/convergence-as-a-service</id>
   <content type="html">&lt;h2 id='convergence_as_a_service'&gt;Convergence as a Service&lt;/h2&gt;

&lt;p&gt;This is getting out of hand. Last decade SaaS made its debut, followed by IaaS and then PaaS. Now, in the Era of the Cloud we&amp;#8217;re suddenly flooded by a spate of these four - and now five - letter acronyms all ending with &amp;#8220;aaS&amp;#8221; and all meaning mostly the same thing: &lt;em&gt;Something&lt;/em&gt; as a Service, like Software, Logging, Data, Communication, Email, Compliance, Mashups, HR, Desktop, Crimeware, Security, Compliance, Integration, Malware, Lawyer, Testing.&lt;/p&gt;

&lt;p&gt;HRaaS is by far the most ironic, and my personal favorite. And yes, Crimeware is a service: see sidebar. Luckily we also have Lawyer-aaS as to prosecute it.&lt;/p&gt;
&lt;img src='http://www.mallardsbaseball.com/images/stories/site_images/news/wet_duck.gif' width='220' /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;p&gt;These repeating and mostly redundant acronyms are in blatent violation of the &lt;a href='http://c2.com/cgi/wiki?DontRepeatYourself'&gt;DRY&lt;/a&gt; principle. Also the increasing overloading of the first letter seems to further expose the impotence of the remaining three.&lt;/p&gt;

&lt;h3 id='baaas'&gt;BAaaS!&lt;/h3&gt;

&lt;p&gt;Banish Acronyms as a Service, I say.&lt;/p&gt;

&lt;p&gt;Luckily the end of this GaaS (Glut of Acronyms as a Service) attack is in sight. Most of these service types are converging.&lt;/p&gt;

&lt;p&gt;And PaaS, specifically &lt;strong&gt;Private PaaS&lt;/strong&gt;, is the natural convergence point, as we&amp;#8217;ll see here, starting with IaaS.&lt;/p&gt;

&lt;h3 id='infrastructure'&gt;Infrastructure&lt;/h3&gt;

&lt;p&gt;By definition PaaS needs infrastructure, whether a laptop or across multi-acre data centers spanning the globe.&lt;/p&gt;

&lt;p&gt;Public IaaS providers abound but they all drive a hard bargain: We give you elastic, self-service, on-demand infrascture &amp;#8211; You hand over your data.&lt;/p&gt;

&lt;p&gt;Many corporations are reluctant &amp;#8211; or prevented (by regulations, liability, customer requirements) from putting their data in the cloud.&lt;/p&gt;

&lt;h4 id='private_paas_meet_private_iaas'&gt;Private PaaS meet Private IaaS&lt;/h4&gt;

&lt;p&gt;With an integrated PaaS / Private IaaS, all the benefits of the cloud are bundled, safely behind your firewall.&lt;/p&gt;

&lt;p&gt;Bundling a Private PaaS product like Stackato with a Private IaaS appliance is a piece of cake: all the hard work was already done in the PaaS and IaaS themselves.&lt;/p&gt;

&lt;h3 id='and_now_private_saas'&gt;And now, Private SaaS&lt;/h3&gt;

&lt;p&gt;The combination of PaaS/IaaS behind the firewall enables Private SaaS: while public SaaS is restricted to companies not squeamish about putting their data in the cloud, Private PaaS works for all SaaS offerings, private or public.&lt;/p&gt;

&lt;p&gt;Take bug tracking software. It&amp;#8217;s a perfect candidate for cloud computing and certainly &lt;a href='http://www.jetbrains.com/youtrack/index.jsp'&gt;SaaS bug trackers&lt;/a&gt; (sigh&amp;#8230;BTaaS) are sprouting up. But many organizations are not immediately inclined to put their bug data (i.e., their core ip) out in the cloud.&lt;/p&gt;

&lt;p&gt;With Private PaaS, bug tracker and any required infrastructure is available on the corporate LAN, integrated with SSO (also provided by PaaS) and likewise integrated with scm, agile suite, email, etc.&lt;/p&gt;

&lt;p&gt;All safely behind the firewall.&lt;/p&gt;

&lt;h3 id='backups'&gt;Backups&lt;/h3&gt;

&lt;p&gt;Cloud-based backups and IaaS go hand in hand. But moving Backups as a Service up to the PaaS layer enables automated, zero-config, disaster-proof backups that can be instantly integrated with an entire application and service suite.&lt;/p&gt;

&lt;h3 id='logging'&gt;Logging&lt;/h3&gt;

&lt;p&gt;Most PaaS offerings already provide extensive centralized logging systems and integrated world-class logging products such as Splunk, graylog2, logyard, and loggly.&lt;/p&gt;

&lt;p&gt;In addition to services and products, logging best practices, antipattern avoidance techniques, and sample code instantly available from AppStore.&lt;/p&gt;

&lt;p&gt;PaaS is a natural delivery vehicle for a fully-fleshed-out, enterprise-ready logging system with its underlying no-config elastic services and apps (databases, message bus, analytics), distributed log integration, and bundled coding practices.&lt;/p&gt;

&lt;h3 id='everything_as_a_service'&gt;Everything as a Service&lt;/h3&gt;

&lt;p&gt;I could go on (and I will&amp;#8230;trust me) with multiple examples describing how DBaaS has already converged with Private PaaS (Stackato provides MySQL, Postgres, MongoDB, Redis, out of the box, no config), or how a comprehensive &lt;strong&gt;Email as a Service&lt;/strong&gt; package can easily be bundled and instantly available behind the corporate firewall, already integrated with the corporate software ecosystem (bug tracking, internal blogs, SSO, etc). The only one I can&amp;#8217;t seem to make fit is Crimeware. I&amp;#8217;ll leave that as an exercise for the reader.&lt;/p&gt;

&lt;h3 id='how_does_this_help_the_acronym_invasion'&gt;How does this Help the Acronym Invasion?&lt;/h3&gt;

&lt;p&gt;Earlier I said we get a reprieve from these aaScronyms. Here&amp;#8217;s how.&lt;/p&gt;

&lt;p&gt;With Stackato and its polyglot support, customizable appstore, no-config services, elastic scaling, and most importantly its ability to deploy on premise, the &amp;#8220;as a Service&amp;#8221; model doesn&amp;#8217;t quite fit anymore. Now, instead of Software as a Service, it&amp;#8217;s just &amp;#8230; Software.&lt;/p&gt;

&lt;p&gt;Sure, it runs in the cloud, but it also runs behind the firewall, or on a laptop. The licensing model may define it as a &amp;#8220;service&amp;#8221; product, but it might now. Fundamentally, it&amp;#8217;s Software.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Software Engineering Organization in a Box&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To summarize, any &lt;a href='http://activestate.com/stackato'&gt;capable Private PaaS product&lt;/a&gt; is capable of delivering a fully-stocked Foundation for an enterprise software organization including infrastructure, scaling, security, and a plethora of cloud-based software tools including bug trackers, project management and agile tools, wiki and blog products, the list goes on and on.&lt;/p&gt;

&lt;p&gt;All this, all at the click of a button. Everthing integrated. All behind your firewall.&lt;/p&gt;

&lt;p&gt;Own your data. Forever.&lt;/p&gt;

&lt;p&gt;With &lt;a href='http://activestate.com/stackato'&gt;Stackato Private PaaS&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt; SIDEBAR: Crimeware? As a service?  Yes: It recently came to
light that &lt;a href='http://www.computerworld.com/s/article/9233831/Malware_uses_Google_Docs_as_proxy_to_command_and_control_server?taxonomyId=86'&gt; Google Drive is being used to host malware&lt;/a&gt;. This is a textbook
example of &lt;b&gt;Crimeware as a Service&lt;/b&gt;: malicious software stored in
the cloud, and accessed with effectively infinite bandwidth (and
securely, over SSL no less) , by infected hosts on demand, making it
even more of a challenge to detect by network-layer security products.


&lt;/pre&gt;&lt;br /&gt;&lt;br /&gt;</content>
 </entry>
 
 <entry>
   <title>LaaS   Logging and PaaS</title>
   <link href="http://bcferrycoder.github.com/2012/11/20/laas---logging-and-paas"/>
   <updated>2012-11-20T00:00:00-08:00</updated>
   <id>http://bcferrycoder.github.com/2012/11/20/laas---logging-and-paas</id>
   <content type="html">&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;SIDEBAR:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;PaaS logging attributes include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;all logs centralized&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Logs can be stored in databases (mongodb is a common choice and used in splunk and loggly and graylog2).&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;instant filters to select logs&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;on-the-fly change log-leverl&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;logging hooks that ensure log uniformity&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;time syncronization&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;bundled best-practice and anti-pattern avoidance&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you have instant, secure, multi-tenency behind your firewall.&lt;/p&gt;

&lt;p&gt;Vision:&lt;/p&gt;

&lt;p&gt;Typical SaaS offerings can be made available behind data center.&lt;/p&gt;

&lt;p&gt;Methodology as a Service:&lt;/p&gt;

&lt;p&gt;Private PaaS will deliver an entire tool suite:&lt;/p&gt;

&lt;p&gt;Integration point for SaaS offerings. Imagine&lt;/p&gt;

&lt;p&gt;This can be defined as &lt;strong&gt;Enterprise in a Box&lt;/strong&gt; and&lt;/p&gt;

&lt;p&gt;Before the advent of the Cloud it often took weeks, even months, to build up a full stack for application development teams. This includes not only the, but also&lt;/p&gt;

&lt;p&gt;Now with PaaS we can deploy in minutes.&lt;/p&gt;

&lt;p&gt;Imagine clicking a few buttons to lay the foundation for your entiere enterprise softwaer development&lt;/p&gt;

&lt;p&gt;IT Tickets Bug tracker Priority tracking Agile Greenhopper etc. Wiki/docs system&lt;/p&gt;

&lt;p&gt;All with backups&lt;/p&gt;

&lt;p&gt;The vision:&lt;/p&gt;

&lt;p&gt;, many of the &lt;strong&gt;as a Services&lt;/strong&gt;&amp;#8217; listed above lend themselves to be bundled with PaaS. And Private PaaS give security-sensitive corporations a path to the convergence without losing ownership of their data.&lt;/p&gt;

&lt;p&gt;We&amp;#8217;ll look at a few service types here, starting with IaaS.&lt;/p&gt;

&lt;p&gt;Integration == Convergence&lt;/p&gt;

&lt;p&gt;Inspired by http://www.forbes.com/sites/reuvencohen/2012/09/26/debating-the-definition-of-cloud-platforms/&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m betting that the term PaaS vanishes in a year from the market place as the layers converge. The convergence of the various cloud descriptions and components are something I think we can probably all agree on. Personally, the distinction between IaaS, SaaS and PaaS has become fairly meaningless, much like the term cloud itself.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;SIDEBAR:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;PaaS logging attributes include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;all logs centralized&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Logs can be stored in databases (mongodb is a common choice and used in splunk and loggly and graylog2).&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;instant filters to select logs&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;on-the-fly change log-leverl&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;logging hooks that ensure log uniformity&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;time syncronization&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;bundled best-practice and anti-pattern avoidance&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you have instant, secure, multi-tenency behind your firewall.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>The Anatomy of a BuildPack</title>
   <link href="http://bcferrycoder.github.com/2012/11/19/the-anatomy-of-a-buildpack"/>
   <updated>2012-11-19T00:00:00-08:00</updated>
   <id>http://bcferrycoder.github.com/2012/11/19/the-anatomy-of-a-buildpack</id>
   <content type="html">&lt;p&gt;Script:&lt;/p&gt;

&lt;p&gt;See slide deck.&lt;/p&gt;

&lt;p&gt;Demo is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open BuildPack URL: https://devcenter.heroku.com/articles/buildpacks#using-a-custom-buildpack&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;https://devcenter.heroku.com/articles/buildpacks&lt;/p&gt;

&lt;p&gt;Need slide with Shell showing URL, highlighting&lt;/p&gt;

&lt;p&gt;https://devcenter.heroku.com/articles/buildpacks#using-a-custom-buildpack 2.&lt;/p&gt;
&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;pre&amp;gt;
&amp;lt;code class=&amp;quot;bash&amp;quot;&amp;gt;

       #!/bin/bash&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Stackato Ports</title>
   <link href="http://bcferrycoder.github.com/2012/11/19/custom-ports-with-stackato"/>
   <updated>2012-11-19T00:00:00-08:00</updated>
   <id>http://bcferrycoder.github.com/2012/11/19/custom-ports-with-stackato</id>
   <content type="html">&lt;p&gt;Stackato has the final (and only) say in which ports a specific application can listen on.&lt;/p&gt;

&lt;p&gt;If your apps use default ports (see table 1) then you can skip this post which describes how to tell Stackato that you&amp;#8217;re using non-standard ports.&lt;/p&gt;

&lt;p&gt;Background&lt;/p&gt;

&lt;p&gt;Most apps deployed to Stackato listen on the default ports as defined by the app container. For example:&lt;/p&gt;

&lt;p&gt;Java Web: Spring: Play: Ruby on Rails: DJango:&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Top Twenty Tool Tryst</title>
   <link href="http://bcferrycoder.github.com/2012/11/17/top-twenty-tech-tango"/>
   <updated>2012-11-17T00:00:00-08:00</updated>
   <id>http://bcferrycoder.github.com/2012/11/17/top-twenty-tech-tango</id>
   <content type="html">&lt;p&gt;Inspired by Rands In Repose &lt;a href='http://www.randsinrepose.com/archives/2009/11/02/the_foamy_rules_for_rabid_tools.html'&gt;Foamy Rules for Rabid Tools&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Take a break, insert fresh sheet of creamy bond, and list the best tools you&amp;#8217;ve encountered since you started messing with computers. By &amp;#8220;best tools&amp;#8221; I mean any &amp;#8220;thing&amp;#8221; (language, IDE, library, framework, process, service, design pattern, coding technique, test suite, methodology, the list goes on) that first, &lt;strong&gt;significantly improves (has improved) life for you as a developer&lt;/strong&gt; and second, is a &lt;strong&gt;true pleasure to behold&lt;/strong&gt;.&lt;/p&gt;
&lt;img src='/assets/images/besttools.png' width='300' /&gt;
&lt;p&gt;Everyone&amp;#8217;s list is different. Mine is based on nothing more than the shear joy I feel when I use these tools. These are listed in no particular order, except that for some reason emacs always seems to top the list.&lt;/p&gt;

&lt;h2 id='best_tools_ever'&gt;best tools EVER&lt;/h2&gt;
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;h4 id='emacs'&gt;emacs&lt;/h4&gt;
&lt;img src='http://www.gnu.org/graphics/bahlon/3d-gnu-head.jpg' width='200px' /&gt;
&lt;h4 id='opa'&gt;Opa&lt;/h4&gt;
&lt;img src='http://a0.twimg.com/profile_images/1817816253/opa-cloud-logo-sq.png' /&gt;
&lt;p&gt;I think Opa represents the future of web development. I &lt;a href='http://blog.bcferrycoder.com/2012/11/17/i-have-seen-the-future/'&gt;just wrote about this&lt;/a&gt; in fact. http://blog.bcferrycoder.com/2012/11/17/i-have-seen-the-future/&lt;/p&gt;

&lt;h4 id='intellij_idea'&gt;Intellij Idea&lt;/h4&gt;
&lt;img src='http://blog.mgm-tp.com/wp-content/uploads/2010/03/IntellIJ-IDEA-Logo.png' /&gt;
&lt;p&gt;I was staunchly opposed to using any sort of IDE given the first entry in this list. Then a famous person convinced me to &amp;#8220;just try NetBeans&amp;#8221; so i did, and I never turned back. Later I tried IDEA and THEN I never turned back. IDEA makes Java fun again.&lt;/p&gt;

&lt;h4 id='mts_macros'&gt;MTS Macros&lt;/h4&gt;
&lt;img src='http://mtswiki.westwood-tech.com/3270-12p.png' width='360' /&gt;
&lt;h4 id='ruby_on_rails'&gt;Ruby on Rails&lt;/h4&gt;
&lt;img src='http://itekblog.com/wp-content/uploads/2012/07/railslogo.png' /&gt;
&lt;p&gt;In 2005 I built an internal Sun app based on Java Server Faces, then shortly thereafter migrated the same app to Ruby on Rails. I kept hearing &amp;#8220;90% code reduction&amp;#8221; blah blah, didn&amp;#8217;t believe it, just hype.&lt;/p&gt;

&lt;p&gt;Then I measured the LoC before/after and&amp;#8230; it achieved almost 90%.&lt;/p&gt;

&lt;p&gt;And Ruby alone seems to reduce annoying and unnecessary syntax by about the same amount. I&amp;#8217;m a fan.&lt;/p&gt;

&lt;h4 id='virtual_machines__of_all_descriptions'&gt;Virtual Machines &amp;#8211; of all descriptions&lt;/h4&gt;
&lt;img src='http://www.pokerbotshop.com/Poker_bot_VM.jpg' /&gt;
&lt;h4 id='stackato_paas'&gt;Stackato PaaS&lt;/h4&gt;
&lt;img src='/assets/images/stackato.png' /&gt;
&lt;h4 id='javaspaces_and_jini'&gt;JavaSpaces and Jini&lt;/h4&gt;
&lt;img src='http://s3images.coroflot.com/user_files/individual_files/original_362839_Tp1DvnUpJJ1DMdsSYcXocKuXH.jpg' /&gt;
&lt;h4 id='google_maps'&gt;Google Maps&lt;/h4&gt;
&lt;img src='http://t3.gstatic.com/images?q=tbn:ANd9GcQYy_jyNaXHsuGakjinauEJ6nwoDUhabLSguEmvh8mng3e_hgScarQf6gSc' /&gt;
&lt;h4 id='apache_camel_and_eip'&gt;Apache Camel and EIP&lt;/h4&gt;
&lt;img src='http://camel.apache.org/images/camel-box-small.png' /&gt;
&lt;h4 id='ibm_370_principles_of_operation'&gt;IBM 370 Principles of Operation&lt;/h4&gt;
&lt;img src='http://3.bp.blogspot.com/_4zmB7e2GN6w/TIius8b998I/AAAAAAAAAvI/kHxCc8FDFOY/s1600/ibm+370+b.jpg' /&gt;
&lt;h4 id='forth'&gt;FORTH&lt;/h4&gt;
&lt;img src='http://ecx.images-amazon.com/images/I/31xd6J2TQoL._SL500_AA300_.jpg' /&gt;
&lt;h4 id='kaazing'&gt;Kaazing&lt;/h4&gt;
&lt;img src='http://3.bp.blogspot.com/_nCmIpaKSog4/SEH7tNJXVeI/AAAAAAAABfs/O6LeCvjv8Vg/s320/KaazingPwrd_RGB_WhiteOnOran.gif' /&gt;
&lt;h4 id='rest'&gt;REST&lt;/h4&gt;
&lt;img src='http://unrealitymag.com/wp-content/uploads/2009/02/cartoon_dads_1.jpg' /&gt;
&lt;h4 id='javafx'&gt;JavaFX&lt;/h4&gt;
&lt;img src='http://mikecann.co.uk/wp-content/uploads/2009/12/javafx_logo_color_1.jpg' /&gt;
&lt;h4 id='commodore_amiga_1000'&gt;Commodore Amiga 1000&lt;/h4&gt;
&lt;img src='https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcT9TzahC_QwKd3F1HDVO6P_gH-5fPLcMDnvHbnwKJcucu1IZUa6KQ' /&gt;
&lt;h4 id='git_and_github'&gt;git and github&lt;/h4&gt;
&lt;img src='http://gems.github.com/octocat.png' /&gt;
&lt;h4 id='next_inc'&gt;NeXT, Inc.&lt;/h4&gt;
&lt;div style='background-color:black;width:200px;height:200px;'&gt;
&lt;img src='http://nextstuff.info/images/nexthalo.gif' /&gt;
&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Camelot</title>
   <link href="http://bcferrycoder.github.com/2012/11/17/camelot"/>
   <updated>2012-11-17T00:00:00-08:00</updated>
   <id>http://bcferrycoder.github.com/2012/11/17/camelot</id>
   <content type="html">&lt;p&gt;Building up a real-world example:&lt;/p&gt;

&lt;p&gt;Overview:&lt;/p&gt;

&lt;p&gt;Maven Buildpacks Camel&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;mvn archetype:generate -DarchetypeGroupId=org.apache.camel.archetypes -DarchetypeArtifactId=camel-archetype-java -DarchetypeRepository=https://repository.apache.org/content/groups/snapsho\&lt;/p&gt;

&lt;h2 id='tsgroup'&gt;ts-group&lt;/h2&gt;

&lt;p&gt;Components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;REST URL&lt;/li&gt;

&lt;li&gt;NoSQL Database&lt;/li&gt;

&lt;li&gt;Camel&lt;/li&gt;

&lt;li&gt;Message Bus&lt;/li&gt;

&lt;li&gt;Logs&lt;/li&gt;

&lt;li&gt;Audit&lt;/li&gt;

&lt;li&gt;RawData capture (backup)&lt;/li&gt;

&lt;li&gt;Aggregators&lt;/li&gt;

&lt;li&gt;General EIP&lt;/li&gt;

&lt;li&gt;Incorporate Best Practices&lt;/li&gt;

&lt;li&gt;Steer away from antipatterns&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PaaS Camel!&lt;/p&gt;

&lt;p&gt;Camelot High Level Bridge&lt;/p&gt;

&lt;p&gt;Enterprise App Characterists:&lt;/p&gt;

&lt;p&gt;YES WE HAVE THESE&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;FIRST CUT:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Three camel apps (1 XML, 2 Java) Rest -&amp;gt; MongoDB + audit + bus&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;RoR or Sinatra Mongo -&amp;gt; REST -&amp;gt; UI&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Monitoring / Logging / Scale&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Kaaa fucking zzzing&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;FUTURE ENTERPRISE PROOF&lt;/p&gt;

&lt;p&gt;Scaling&lt;/p&gt;

&lt;p&gt;Monitor with AOP:&lt;/p&gt;

&lt;p&gt;Integration Complexity : EIP: Camel, Layers/Components&lt;/p&gt;

&lt;p&gt;Polyglot: Languages (Java, Ruby, JS) libraryes too (spring, camel, RoR)&lt;/p&gt;

&lt;p&gt;Databases: MySQL and MongoDB&lt;/p&gt;

&lt;p&gt;Messaging: RabbitMQ and ActiveMQ&lt;/p&gt;

&lt;p&gt;Auditing&lt;/p&gt;

&lt;p&gt;Logging&lt;/p&gt;

&lt;p&gt;Performance, Health Monitoring http://www.consulting-notes.com/2011/08/performance-monitoring-with-spring-aop.html&lt;/p&gt;

&lt;p&gt;http api&lt;/p&gt;

&lt;p&gt;complex services interaction&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;WE DON&amp;#8217;T HAVE THESE&lt;/p&gt;

&lt;p&gt;RICH WEB UI&lt;/p&gt;

&lt;p&gt;BATCH/OFFLINE&lt;/p&gt;

&lt;p&gt;TEST&lt;/p&gt;

&lt;p&gt;AUTH/ROLES/SSO&lt;/p&gt;

&lt;p&gt;I18N/I10N&lt;/p&gt;

&lt;p&gt;SECURITY INTRUSION&lt;/p&gt;

&lt;p&gt;SLAS&lt;/p&gt;

&lt;p&gt;PORTS/COMMUNICATIONS CHANNELS&lt;/p&gt;

&lt;p&gt;NOTIFICATIONS&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Play with Stackato</title>
   <link href="http://bcferrycoder.github.com/2012/11/16/play-with-stackato"/>
   <updated>2012-11-16T00:00:00-08:00</updated>
   <id>http://bcferrycoder.github.com/2012/11/16/play-with-stackato</id>
   <content type="html">&lt;p&gt;WHAT?&lt;/p&gt;

&lt;p&gt;MVC frameworks are sprouting up faster than acronyms ending in aaS.&lt;/p&gt;

&lt;p&gt;Most MVC frameworks, of these tend to be written in dynamic languages, and JavaScript is&lt;/p&gt;

&lt;p&gt;Back in 2006 Ruby on Rails hit the world by storm and brought MVC to the mainstream.&lt;/p&gt;

&lt;p&gt;Since then MVC frameworks have been sprouting up faster than acronyms ending in &amp;#8220;aaS&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Many of these new frameworks are built on JavaScript, due to the appeal of a unified language on all tiers. Other dynamic languages such as Ruby and Python are popular.&lt;/p&gt;

&lt;p&gt;Of course there&amp;#8217;s no shortage of Java-based MVC frameworks, but after working with Ruby on Rails, the Java frameworks feel too much like &amp;#8230; Java.&lt;/p&gt;

&lt;p&gt;Java shops are left in a quandry: either introduce a new language into the mix, with its associated complexity and ramp-up time, or try one of the existing Java web frameworks. Just reading through the list can take hours. An evaluation can take days, weeks.&lt;/p&gt;

&lt;p&gt;And you end up with something that works, but isn&amp;#8217;t as elegent or expressive as Ruby on Rails.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Sidebar: save gazillion&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;But now there&amp;#8217;s an alternative. The Play! framework is Yet Another MVC Framework, but this one&amp;#8217;s for Java developers.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s modeled closely after RoR. It&amp;#8217;s so close that after working with it for a few hours I kept forgetting I was using Play instead of Rails. But I never forgot I was using Java, a downside of which is that it&amp;#8217;s not as expressive as Ruby.&lt;/p&gt;

&lt;p&gt;But Java has many strength which&lt;/p&gt;

&lt;p&gt;But that can be an upside if you have experienced Java developers on board.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    play new vote&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;#8217;s as simple as that.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s will&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Convergence as a Service</title>
   <link href="http://bcferrycoder.github.com/2012/11/14/enough-already-as-a-service"/>
   <updated>2012-11-14T00:00:00-08:00</updated>
   <id>http://bcferrycoder.github.com/2012/11/14/enough-already-as-a-service</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ABSTRACT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many/most cloud-based &lt;strong&gt;&lt;em&gt;as a Service&lt;/em&gt;&lt;/strong&gt; offerings naturally converge with Private PaaS. with its&amp;#8230; provides a natural convergence point for many of these cloud-based service offerings&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id='convergence_as_a_service'&gt;Convergence as a Service&lt;/h2&gt;

&lt;p&gt;This is getting out of hand. Just over 10 ago SaaS made its debut, followed by IaaS and then PaaS. Now, with the sheer momentum of &amp;#8220;The Cloud,&amp;#8221; we&amp;#8217;re being flooded by a spate of these four - and now five - letter acronyms all ending with &amp;#8220;aaS&amp;#8221; and all meaning the same thing: Something as a Service.&lt;/p&gt;

&lt;p&gt;Here is a by-no-means-exhaustive list of these Somethings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Software (SaaS)&lt;/li&gt;

&lt;li&gt;Infrastructure (IaaS)&lt;/li&gt;

&lt;li&gt;Platform (PaaS)&lt;/li&gt;

&lt;li&gt;Human Resources (HRaaS)&lt;/li&gt;

&lt;li&gt;Data (DaaS)&lt;/li&gt;

&lt;li&gt;Logging (sim.)&lt;/li&gt;

&lt;li&gt;Lawyer&lt;/li&gt;

&lt;li&gt;Email&lt;/li&gt;

&lt;li&gt;Mashups&lt;/li&gt;

&lt;li&gt;Desktop&lt;/li&gt;

&lt;li&gt;Malware&lt;/li&gt;

&lt;li&gt;Crimeware&lt;/li&gt;

&lt;li&gt;Security&lt;/li&gt;

&lt;li&gt;Integration&lt;/li&gt;

&lt;li&gt;Communication&lt;/li&gt;

&lt;li&gt;Testing&lt;/li&gt;

&lt;li&gt;Compliance&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;SIDEBAR: Crimeware? As a service? &amp;gt; Yes: This week it was uncovered that &lt;a href='&amp;quot;http://www.computerworld.com/s/article/9233831/Malware_uses_Google_Docs_as_proxy_to_command_and_control_server?taxonomyId=86&amp;quot;'&gt;Google Drive is being used to host malware&lt;/a&gt;. This is a textbook example of &lt;strong&gt;Crimeware as a Service&lt;/strong&gt;: malicious software stored in the cloud, and accessed with effecitively infinite bandwitdh (and securely, over SSL no less) , by infected hosts on demand, making it even more of a challenge to detect by network-layer security products.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These repeating &amp;#8220;as a Service&amp;#8221; acronyms are in blatent violation of the DRY (&lt;a href='&amp;quot;http://www.computerworld.com/s/article/9233831/Malware_uses_Google_Docs_as_proxy_to_command_and_control_server?taxonomyId=86&amp;quot;'&gt;Don&amp;#8217;t Repeat Yourself&lt;/a&gt;) principle. Also, overloading the first letter (eg: Security, Software, Storage) seems to further expose the inadaquacy of those last 3 letters.&lt;/p&gt;

&lt;h3 id='baas'&gt;BaaS&lt;/h3&gt;

&lt;p&gt;Ban the aaScronym, I say.&lt;/p&gt;

&lt;p&gt;Luckly the end of this invasion is in sight. Many/most/all of these service types are converging.&lt;/p&gt;

&lt;p&gt;And PaaS, specifically &lt;strong&gt;Private PaaS&lt;/strong&gt;, is the natural convergence point, as we&amp;#8217;ll see here, starting with IaaS.&lt;/p&gt;

&lt;h3 id='infrastructure'&gt;Infrastructure&lt;/h3&gt;

&lt;p&gt;By definition PaaS needs infrastructure, whether a Raspberry Pi or a dozens of multi-acre data centers spanning the globe. Thus it only makes sense the IaaS and PaaS will be a package deal, both public PaaS/IaaS, and private offerings such as &lt;a href='&amp;quot;http://activestate.com/stackato&amp;quot;'&gt;Stackato&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;IaaS offerings are used to deploy, monitor, meter, and scale infrasucture assets required for PaaS. Infrastucture services, offering many advantages and abundantly available in the cloud, drive a hard bargain: Very high ROI but the cost is steep (&amp;#8220;just hand us all your data&amp;#8221;).&lt;/p&gt;

&lt;p&gt;Instead, if the IaaS product suite is based on PaaS (as it should be), then two can be deployed together with single point of managemetn, and full integration.&lt;/p&gt;

&lt;p&gt;Why? IaaS is an heavy-duty enterprise application delivered to the cloud. The IaaS developers benefit from PaaS as much or more than any cloud developer does. So they &lt;strong&gt;Better&lt;/strong&gt; be using a PaaS, or I need to have a quick chat with them.&lt;/p&gt;

&lt;p&gt;But I digress. The point is, build your IaaS platform on PaaS, then bundle the two as the product.&lt;/p&gt;

&lt;p&gt;This is the convergence of the two.&lt;/p&gt;

&lt;h3 id='backups'&gt;Backups&lt;/h3&gt;

&lt;p&gt;Cloud-based backups: It makes sense to deliver backups as part of IaaS. But moving BaaS up to the PaaS layer enables automated, zero-config, disaster-proof backups that can be instantly integrated with an entire application and service suite.&lt;/p&gt;

&lt;h3 id='logging'&gt;Logging&lt;/h3&gt;

&lt;p&gt;LaaS - Logging as a Service. Most PaaS offerings already offer extansive centralized logging systems and integrating world-class logging products such as Splunk, graylog2, logyard, and loggly.&lt;/p&gt;

&lt;p&gt;In addition to services and products, logging best practices, antipattern avoindance techniques, and sample code instantly available from AppStore.&lt;/p&gt;

&lt;p&gt;PaaS is a natural delivery vehicle for a fully-fleshed-out, enterprise-ready logging system with underlying services (mongodb, analytics), distributed log integration, and code starting points.&lt;/p&gt;

&lt;p&gt;SaaS: the ticket submission system, integrated with bugtrack, available in PaaS App Store. This includes the Infrastructure, along with backups, notifications, batch, and failover.&lt;/p&gt;

&lt;h3 id='everything_as_a_service'&gt;Everything as a Service&lt;/h3&gt;

&lt;p&gt;I could go on and on (and I will&amp;#8230;trust me) with multiple examples describing how a DataBase-aaS has already converged with PaaS (Scalr, CF, Stackato), or how a comprehensive &lt;strong&gt;Email as a Service&lt;/strong&gt; package can bundled and instantly available within the firewall, and integrated with your entire software ecosystem.&lt;/p&gt;

&lt;p&gt;Or Security as a Service (there&amp;#8217;s that overloaded &amp;#8220;S&amp;#8221;) emphatically one of the more important offerings, is immediately enabled with Private PaaS (all your data and IP behind the firewall, you own it for all of time). As important, delivery of industry security best practices in the form of templates and app skeltons&lt;/p&gt;

&lt;p&gt;Additionally PaaS offerings are already integrating cloud-centric security offerings by companies like Ping Identity, Vorstack, and others.&lt;/p&gt;

&lt;p&gt;Stay tuned for further examples.&lt;/p&gt;

&lt;h3 id='enterprise_as_a_service__enterprise_in_a_box'&gt;Enterprise as a Service / Enterprise in a Box&lt;/h3&gt;

&lt;p&gt;To summarize, any &lt;a href='&amp;quot;http://activestate.com/stackato&amp;quot;'&gt;capable Private PaaS product&lt;/a&gt; is capable of delivering a fully-stocked Enterprise Software Foundation including infrastructure, scaling, security, and a plethora of cloud-based software tools including bug trackers, project management and agile tools, wiki and blog products, the list goes on and on.&lt;/p&gt;

&lt;p&gt;All this, all at the click of a button. Everthing integrated. And&amp;#8230; all behind your firewall.&lt;/p&gt;

&lt;p&gt;Own your data. Forever.&lt;/p&gt;

&lt;p&gt;With&lt;/p&gt;

&lt;p&gt;PaaS&lt;/p&gt;

&lt;p&gt;Vision:&lt;/p&gt;

&lt;p&gt;Typical SaaS offerings can be made available behind data center.&lt;/p&gt;

&lt;p&gt;Methodology as a Service:&lt;/p&gt;

&lt;p&gt;Private PaaS will deliver an entire tool suite:&lt;/p&gt;

&lt;p&gt;Integration point for SaaS offerings. Imagine&lt;/p&gt;

&lt;p&gt;This can be defined as &lt;strong&gt;Enterprise in a Box&lt;/strong&gt; and&lt;/p&gt;

&lt;p&gt;Before the advent of the Cloud it often took weeks, even months, to build up a full stack for application development teams. This includes not only the, but also&lt;/p&gt;

&lt;p&gt;Now with PaaS we can deploy in minutes.&lt;/p&gt;

&lt;p&gt;Imagine clicking a few buttons to lay the foundation for your entiere enterprise softwaer development&lt;/p&gt;

&lt;p&gt;IT Tickets Bug tracker Priority tracking Agile Greenhopper etc. Wiki/docs system&lt;/p&gt;

&lt;p&gt;All with backups&lt;/p&gt;

&lt;p&gt;The vision:&lt;/p&gt;

&lt;p&gt;, many of the &lt;strong&gt;as a Services&lt;/strong&gt;&amp;#8217; listed above lend themselves to be bundled with PaaS. And Private PaaS give security-sensitive corporations a path to the convergence without losing ownership of their data.&lt;/p&gt;

&lt;p&gt;We&amp;#8217;ll look at a few service types here, starting with IaaS.&lt;/p&gt;

&lt;p&gt;Integration == Convergence&lt;/p&gt;

&lt;p&gt;Inspired by http://www.forbes.com/sites/reuvencohen/2012/09/26/debating-the-definition-of-cloud-platforms/&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m betting that the term PaaS vanishes in a year from the market place as the layers converge. The convergence of the various cloud descriptions and components are something I think we can probably all agree on. Personally, the distinction between IaaS, SaaS and PaaS has become fairly meaningless, much like the term cloud itself.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;SIDEBAR:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;PaaS logging attributes include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;all logs centralized&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Logs can be stored in databases (mongodb is a common choice and used in splunk and loggly and graylog2).&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;instant filters to select logs&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;on-the-fly change log-leverl&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;logging hooks that ensure log uniformity&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;time syncronization&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;bundled best-practice and anti-pattern avoidance&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you have instant, secure, multi-tenency behind your firewall.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>STStackato</title>
   <link href="http://bcferrycoder.github.com/2012/10/27/ststackato"/>
   <updated>2012-10-27T00:00:00-07:00</updated>
   <id>http://bcferrycoder.github.com/2012/10/27/ststackato</id>
   <content type="html">&lt;p&gt;Show environment and setup, including versions of all apps&lt;/p&gt;

&lt;p&gt;TOP LEVEL SCRIPTS:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Setup/Prerequisites&lt;/li&gt;

&lt;li&gt;simple jsp -&amp;gt; tomcat -&amp;gt; stackato&lt;/li&gt;

&lt;li&gt;spring -&amp;gt; tomcat -&amp;gt; stackato 3a. cover this: Configure -&amp;gt; Enable as CloudFoundry Standalone App (what&amp;#8217;s it do?)&lt;/li&gt;

&lt;li&gt;What about the &amp;#8220;other&amp;#8221; IDEs: NB and IDEA options: load project manually deploy with stackato client IDEA V12 (http://blogs.jetbrains.com/idea/2012/06/intellij-idea-12-leda-preview-is-out/)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Slides:&lt;/p&gt;

&lt;p&gt;TITLE: STS and Stackato Manage the Cloud With Eclipse&lt;/p&gt;

&lt;p&gt;What is this?&lt;/p&gt;

&lt;p&gt;Why is this important?&lt;/p&gt;

&lt;p&gt;Where can you learn more?&lt;/p&gt;

&lt;p&gt;SETUP: VirtualBox, MicroCloud, STS, CF plugin&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;download VirtualBox&lt;/li&gt;

&lt;li&gt;download microcloud&lt;/li&gt;

&lt;li&gt;import vm&lt;/li&gt;

&lt;li&gt;configure bridged network&lt;/li&gt;

&lt;li&gt;boot&lt;/li&gt;

&lt;li&gt;web console, create account, deploy some app (env?)&lt;/li&gt;

&lt;li&gt;install STS&lt;/li&gt;

&lt;li&gt;tomcat&lt;/li&gt;

&lt;li&gt;install/configure eclipse cloud foundry plugin&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;CAST1: create simple web app&lt;/p&gt;

&lt;p&gt;SLIDE: First web app Slide: Prerequisites (see SETUP)&lt;/p&gt;

&lt;p&gt;Script 1: (MAKE THIS SIMPLYJSP INSTEAD) Launch STS Dashboard File -&amp;gt; New -&amp;gt; &amp;#8220;Static Web Project&amp;#8221; Image 1 make sure select &amp;#8220;Dynamic Web Module Version&amp;#8221; 2.5 Click &amp;#8220;finish&amp;#8221; (or take defaults in next two screens) STS will offer to open JavaEE Perspective: accept&lt;/p&gt;

&lt;p&gt;Right-click project, select New JSP: index.jsp Default template&lt;/p&gt;

&lt;p&gt;Add simple HTML to JSP: &lt;h1&gt;Greetings&lt;/h1&gt;&lt;/p&gt;

&lt;p&gt;Then &amp;#8220;Run As&amp;#8221; -&amp;gt; &amp;#8220;Run on Server&amp;#8221; Choose Tomcat&lt;/p&gt;

&lt;p&gt;Ensure new &amp;#8220;SimpleJSP&amp;#8221; is listed in &amp;#8220;Configured&amp;#8221; column&lt;/p&gt;

&lt;p&gt;Voila! App is launched within tomcat container&lt;/p&gt;

&lt;p&gt;Show lifecycle: edit index.jsp, restart server (is there a better way?)&lt;/p&gt;

&lt;p&gt;Slide: basis of all web apps, serlets, etc.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Script 2: Launch STS Dashboard File -&amp;gt; New -&amp;gt; &amp;#8220;Static Web Project&amp;#8221; &amp;#8211; call it Springtime Image 1 make sure select &amp;#8220;Dynamic Web Module Version&amp;#8221; 2.5 Click &amp;#8220;finish&amp;#8221; (or take defaults in next two screens) STS will offer to open JavaEE Perspective: accept&lt;/p&gt;

&lt;p&gt;Right-click project, select New JSP: index.jsp Default template&lt;/p&gt;

&lt;p&gt;Add simple HTML to JSP: &lt;h1&gt;Greetings&lt;/h1&gt;&lt;/p&gt;

&lt;p&gt;Then &amp;#8220;Run As&amp;#8221; -&amp;gt; &amp;#8220;Run on Server&amp;#8221; Choose Tomcat&lt;/p&gt;

&lt;p&gt;Ensure new &amp;#8220;SimpleJSP&amp;#8221; is listed in &amp;#8220;Configured&amp;#8221; column&lt;/p&gt;

&lt;p&gt;Voila! App is launched within tomcat container&lt;/p&gt;

&lt;p&gt;Show lifecycle: edit index.jsp, restart server (is there a better way?)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Script 5: Camel: cover templates: http://janstey.blogspot.com/2008/08/eclipse-templates-for-apache-camel.html cover cookbook and examples and tutorials http://camel.apache.org/cookbook.html http://camel.apache.org/examples.html http://camel.apache.org/tutorials.html&lt;/p&gt;

&lt;p&gt;Specifically: URI -&amp;gt; componenets/processors -&amp;gt; mongodb&lt;/p&gt;

&lt;p&gt;Steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;New Project -&amp;gt; Maven Project&lt;/li&gt;

&lt;li&gt;Add Archetype catelog: http://repo1.maven.org/maven2/archetype-catalog.xml 3.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;include logging&lt;/p&gt;
&lt;hr /&gt;</content>
 </entry>
 
 <entry>
   <title>polyglot</title>
   <link href="http://bcferrycoder.github.com/2012/10/26/polyglot2"/>
   <updated>2012-10-26T00:00:00-07:00</updated>
   <id>http://bcferrycoder.github.com/2012/10/26/polyglot2</id>
   <content type="html">&lt;p&gt;A &lt;strong&gt;polyglot&lt;/strong&gt; is defined as is &lt;strong&gt;one who is fluent in multiple languages.&lt;/strong&gt; This is similar to how a multilinguist is &amp;#8230; uh &amp;#8230;fluent in multiple languages. (OK, who invented two words for the same concept?)&lt;/p&gt;

&lt;p&gt;Well, it turns out polyglot applies not only to spoken languages, but to written languages as well, such as Clojure and Ruby.&lt;/p&gt;

&lt;p&gt;And thus in the software world, a polyglot is an application built on multiple languages. The term also applies to developer tools that can manipulate such apps.&lt;/p&gt;

&lt;h4 id='why_add_complexity'&gt;Why Add Complexity?&lt;/h4&gt;

&lt;p&gt;By definition adding languages increases complexity. Syntax, tools, docs, thought processes, talent pools, libraries, meetups and trade-shows to attend, rss feeds to subscribe to, blogs to read, test strategies, &amp;#8230; there are good reasons to go with a single language to unify the required knowledge and dramatically reduce complexity and overhead.&lt;/p&gt;

&lt;p&gt;So given their additional complexity and cost, why are polyglot apps rampant in enterprise software endeavors?&lt;/p&gt;

&lt;h4 id='go_poly_'&gt;Go Poly !!!&lt;/h4&gt;

&lt;p&gt;The best reason to use multiple languages is captured by the simple maxim: &lt;em&gt;Use the Right Tool for the Job&lt;/em&gt;. All languages are not created equal. Successful languages are successful for a reason, usually because of something they do well.&lt;/p&gt;

&lt;p&gt;Consider some typical enterprise tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;create a test suite, defining DSLs to orchestrate the tests&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;build a secure, transactional, high-volume backend that sits behind REST&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;validate and respond to user input in a browser&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;manipulate registers and hardware in a limited-memory device&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;rapidly prototype a traditional MVC web app&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;build a sophisticated UI-heavy workflow management system&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;frequently perform long-running data-manipulating batch-jobs&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The list of languages chosen for these tasks is as varied as the organizations that make such choices. Influencing factors include compatibilty with existing tools, customer requirements, legacy code, performance criteria, library availability, cost, support options, complexity, open source considerations, team experience and bias&amp;#8230; the list goes on.&lt;/p&gt;

&lt;p&gt;One thing is clear: there is no &amp;#8220;one language fits all&amp;#8221;. So polyglot apps are here, for the forseeable future anyway. But as mentioned above, adding languages introduces complexity which especially impacts the deployment phase and hits multiple teams (dev, QA, release, IT).&lt;/p&gt;

&lt;h4 id='paas_to_the_rescue'&gt;PaaS to the Rescue&lt;/h4&gt;

&lt;p&gt;With the advent of PaaS a solution is at hand. Instead of spending days/weeks and the efforts of multiple teams assembling a stack that supports multiple languages, with PaaS the same platform can be created in minutes.&lt;/p&gt;

&lt;p&gt;In particular, Active State&amp;#8217;s Private PaaS offering Stackato is well versed in a wide array of languages including Ruby, Java, Python, Tcl, .NET, Perl, JavaScript/Node.js, PHP, Clojure, Erlang, Scala, &amp;#8230; and the list is expanding.&lt;/p&gt;

&lt;p&gt;Side note: Stackato&amp;#8217;s support of 10 (and growing) languages elevates it to the status of true &lt;strong&gt;hyperpolyglot&lt;/strong&gt;, meaning fluent in 6 or more languages.&lt;/p&gt;

&lt;p&gt;And not only languages: Stackato also supports the frameworks that go them including Ruby on Rails, Spring, Django, Play!, backbone, and bundles common services such as MySQL, RabbitMQ, Nginx, MongoDB, Redis.&lt;/p&gt;

&lt;p&gt;So if you are constructing or maintaining app with components built with disparate languages, take a few minutes to fire up Stackato. You&amp;#8217;ll save considerable effort/time assembling a such a platform yourself, and at the end of the day all teams will have an identical deployment enviroment.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>antipattern2: Bolt on Security</title>
   <link href="http://bcferrycoder.github.com/2012/10/24/antipattern2-bolt-on-security"/>
   <updated>2012-10-24T00:00:00-07:00</updated>
   <id>http://bcferrycoder.github.com/2012/10/24/antipattern2-bolt-on-security</id>
   <content type="html">&lt;p&gt;Cost of breach:&lt;/p&gt;

&lt;p&gt;http://www.symantec.com/content/en/us/about/media/pdfs/b-ponemon-2011-cost-of-data-breach-us.en-us.pdf&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Combating Software Antipatterns with Platform as a Service</title>
   <link href="http://bcferrycoder.github.com/2012/10/22/cambatting-software-antipatterns-with-platform-as-a-service"/>
   <updated>2012-10-22T00:00:00-07:00</updated>
   <id>http://bcferrycoder.github.com/2012/10/22/cambatting-software-antipatterns-with-platform-as-a-service</id>
   <content type="html">&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;p&gt;Combating Antipatterns with Platform as a Service&lt;/p&gt;

&lt;p&gt;This is the first installment of a series on antipatterns that are found in software organizations today.&lt;/p&gt;

&lt;h3 id='antipattern_1_optimize_early'&gt;Antipattern #1: Optimize Early&lt;/h3&gt;

&lt;p&gt;Premature optimization, or the practice of dedicating early resources to the improvement of application performance, often results in overengineering, an undesirable practice that can impact overall success.&lt;/p&gt;

&lt;p&gt;Here we examine this well-known antipattern and show some of its not-so-obvious, more incidious causes. We&amp;#8217;ll then show how Platform as a Service helps reduce pre-optimization and also how its powerful scaling mechanisms allow concentrated focus on scaling from day one.&lt;/p&gt;

&lt;h4 id='overengineering'&gt;Overengineering&lt;/h4&gt;

&lt;p&gt;Overenginering means building something to be more robust, or faster, or complex than it needs to be. It&amp;#8217;s usally recognized as an antipattern to be avoided. But not always.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s a good example: Visitors to the Grand Canyon in Arizona can step onto a platform with transparent floors that&amp;#8217;s poised over the famous abyss. This platform, called the &amp;#8220;Skywalk,&amp;#8221; is designed to hold 120 people who come to gaze through the glass floor, and through 4000 feet of Arizona air, at the Colorado river below.&lt;/p&gt;
&lt;img src='http://upload.wikimedia.org/wikipedia/commons/thumb/a/a1/Grand-canyon-west-skywalk.jpg/450px-Grand-canyon-west-skywalk.jpg' width='240' /&gt;
&lt;h4 id='how_strong_is_it'&gt;How strong is it?&lt;/h4&gt;

&lt;p&gt;Obviously the Skywalk needs to be strong enough to hold 120 people, and it most certainly is: its foundation is structurally rated to support .. get this &amp;#8230; 71 million pounds. (!)&lt;/p&gt;

&lt;p&gt;That seems a bit&amp;#8230;extreme. For example, to exceed its rated weight without overcrowding (i.e., with no more than 120 pairs of shoes on the glass), each of those 120 folks on the bottom layer would need to carry &lt;strong&gt;four hundred thousand people&lt;/strong&gt; on their shoulders.&lt;/p&gt;

&lt;p&gt;I think it&amp;#8217;s safe to say that the foundation of the Skywalk is over-engineered.&lt;/p&gt;

&lt;p&gt;Which isn&amp;#8217;t always a bad thing. You&amp;#8217;d probably agree that overengineering the Skywalk is preferable to underengineering it. I&amp;#8217;d also bet that the extra cost probably wasn&amp;#8217;t exhorbitantly high. The extra hype alone (supports the weight of 80 fully loaded Boeing 747&amp;#8217;s!! ), probably makes it worth it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But overengineering is a problem if it incurs cost.&lt;/strong&gt; And it frequently does. Building something that&amp;#8217;s not needed is a waste of time, and requires extra resources (hardware, programmers, docs, infrastructure, way more) And it can be harmful when it results, as it often does, in increased complexity.&lt;/p&gt;

&lt;p&gt;So it&amp;#8217;s worth identifying factors that encourage overengineering. The practice of &amp;#8220;Premature Optimization,&amp;#8221; where optimization effort is expended early in an application&amp;#8217;s lifecycle, is one such factor: an engineering practice that often seduces programmers into overengineering.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id='premature_optimization'&gt;Premature Optimization&lt;/h3&gt;

&lt;p&gt;Premature Optimization is likely the most famous software antipattern and has been discussed actively for almost 40 years since Donald Knuth&amp;#8217;s famous &amp;#8220;premature optimization is the root of all evil&amp;#8221; quote. These discussion have raised some good reasons not to over-invest in code optimization at the front-end of the Software Development Lifecycle&lt;/p&gt;

&lt;h5 id='why_is_optimizing_early_a_problem'&gt;Why is Optimizing Early a Problem?&lt;/h5&gt;

&lt;p&gt;Here are a few reasons to avoid optimizing an application before its performance characteristics are understood:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Requirements tend to change during the early phases of development. Clearly there&amp;#8217;s no point optimizing something that eventually gets eliminated due to requirement changes.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Similarly, redesign and refactoring can also negate an optimization effort. This is particularly perverse if the refactoring is the result of further optimization efforts.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Often the component that&amp;#8217;s the target of optimization turns out not to be a bottleneck in the processes/dataflows in which it participates, so even after it&amp;#8217;s optimized, the overall throughput doesn&amp;#8217;t improve.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;As tempting as it is, focusing granularly on specific &amp;#8220;underperforming&amp;#8221; components fails to look at the big picture. It often makes more sense to &amp;#8220;scale out,&amp;#8221; for example by increasing the number of participating component instances, than it does to optimize the component itself.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Sometimes optimized code can be more complex, and thus less maintainable, than the equivalent non-optimized code. (Note that the opposite can be true too). Complex and difficult-to-maintain code has long-term ill-effects on all aspects of a product&amp;#8217;s success.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id='beyond_code_tweaking'&gt;Beyond Code Tweaking&lt;/h4&gt;

&lt;p&gt;Premature optimization is a relatively familiar concept at the coding level, but optimization reaches beyond algorithm enhancement and code improvements. Some common and incipient optimizations can sneak into the app lifecycle when no-one is looking.&lt;/p&gt;

&lt;p&gt;For example, consider a startup at the early phases of its app lifecycle. It has the killer idea, already prototyped and funded, which will undoubtably surpass twitter in popularity. But it has to move fast to beat the comptetition. Also because of its certain popularity it needs to scale, hard.&lt;/p&gt;

&lt;p&gt;The architects have determined that a message-based system makes the most sense, so the new engineering team needs a fast message broker to relay messages between the various app components. And because messaging technologies are constantly evolving it makes sense to dedicate an engineer to the task of evaluating the current breed of message products and recommending one that is fast.&lt;/p&gt;

&lt;p&gt;This performance evaluation is a natural step, and it isn&amp;#8217;t a big hit, maybe a day or two of engineer/architect time.&lt;/p&gt;
&lt;img src='/assets/images/stop.png' /&gt;
&lt;h3 id='antipattern_alert'&gt;Antipattern Alert!&lt;/h3&gt;

&lt;p&gt;Stop right there! This is a perfect example of premature optimization. The two day hit early in the cycle is costly, and that time can be put to much better uses. We&amp;#8217;ll cover those uses shortly, but first, let&amp;#8217;s talk about PaaS.&lt;/p&gt;

&lt;h2 id='platform_as_a_service'&gt;Platform as a Service&lt;/h2&gt;

&lt;p&gt;Platform as a Service (PaaS) is groundbreaking technology that provides to enterprises a fully fleshed-out foundation from which to launch development efforts. The better PaaS offerings include a variety of services, configured to work out-of-the-box with no overhead required for installing, configuring, deploying. Or for that matter evaluating. In addition to app containers, sql and nosql databases, centralized logging, security infrastructure, web servers, and much more, PaaS offerings often include one or more common message brokers.&lt;/p&gt;

&lt;p&gt;My suggestion: skip the two-day message broker evaluation and instead use PaaS as the basis for your development efforts. Specifically, incorporate the PaaS-bundled message broker into your stack. This allows you to get the application off the ground, stabilize the data-flow and evaluate the archecture, while also thoroughly measuring and analyzing its performance characteristics.&lt;/p&gt;

&lt;p&gt;Later, after the data-flow, requirements, and overall architecture has gelled, you have a foundation from which to thoroughly evaluate the performance characteristics of your application.&lt;/p&gt;

&lt;h3 id='optimization_and_scaling'&gt;Optimization and Scaling&lt;/h3&gt;

&lt;p&gt;Many applications have high scaling requirements: these unfortunately can often errantly fuel the tendency to optimize. This is because optimization and scaling are frequently confused.&lt;/p&gt;

&lt;p&gt;But Optimization != Scaling. The two are related, but the former should be postponed as much as possible, while the latter must be a high priority from the outset.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;sidebar: failing &amp;#8220;slash-dot effect&amp;#8221; - show graph - social networking (twitter, facebook, linkedin, and news aggregators: techcrunch, hacker news, slash-dot)&lt;/span&gt;&lt;/p&gt;

&lt;h3 id='building_for_scale'&gt;Building for Scale&lt;/h3&gt;

&lt;p&gt;Building for scale doesn&amp;#8217;t mean making your code run fast: it means designing your app and its overall ecosystem to scale and, just as important, it means gaining a deep understanding of the specific factors that affect your application&amp;#8217;s performance. The best way to gain this understanding is through measurment and instrumentation.&lt;/p&gt;

&lt;p&gt;So, take those two days you saved by skipping the message broker evaluation, and pour this time into repeatable performance monitoring and measurement. This could mean looking at performance tools (yourkit, ruby-prof, dtrace, Shark, NodeTime, yslow, google Page Speed - the list is endless, and depends on the underlying technology stack). Or building repeatable performance tests that can be incorporated into your build process.&lt;/p&gt;

&lt;p&gt;While you&amp;#8217;re at it have a look at the introduction to Gartner&amp;#8217;s &lt;a href='http://www.gartner.com/technology/reprints.do?ct=120820&amp;amp;id=1-1BRNFO0&amp;amp;st=sg'&gt;Magic Quadrant for Application Performance Monitoring&lt;/a&gt; which emphasizes the importance of profiling, measuring, and tooling to provide visibility into an application&amp;#8217;s performance. This visibility then then be used to drive optimization efforts and quantify their outcomes.&lt;/p&gt;

&lt;p&gt;Bottom line: don&amp;#8217;t dive into optimization but instead become fluent in tools, techniques, and tests to allow you to determine your apps performance characteristics.&lt;/p&gt;

&lt;p&gt;This is an area where PaaS really shines.&lt;/p&gt;

&lt;h3 id='scaling_with_platform_as_a_service'&gt;Scaling with Platform as a Service&lt;/h3&gt;

&lt;p&gt;Earlier I suggested using a PaaS product to provide required services including a message broker. This automated service availability is a big time-saver that can jumpstart your software development process. But PaaS does much more than provide no-configuration out-of-the-box services. Scaling is a perfect example.&lt;/p&gt;

&lt;p&gt;A quality PaaS platform enables scalability out of the box. Deploy a skeletal, first-cut, minimally functional version of your application at its very early stages to PaaS, and you&amp;#8217;ve deployed it into an environment that can be instantly scaled. PaaS allows you to tune and manage resources, spawn multiple service instances (such as message brokers) and measure immediately, using the tools and tests you&amp;#8217;ve now incorported, the effects of adding additional these resouces to the stack.&lt;/p&gt;

&lt;p&gt;A maxim of of Scrum is &amp;#8220;fail early.&amp;#8221; Incorporating PaaS into your development process allows you to &lt;strong&gt;scale early&lt;/strong&gt;, and thus, scale.&lt;/p&gt;

&lt;p&gt;Note: A companion article walks through the process of creating a scalable web application, and highlights each of the points discussed in this series.&lt;/p&gt;

&lt;h5 id='next_in_series_antipattern_2_bolton_security'&gt;Next in series: Antipattern #2: Bolt-On Security&lt;/h5&gt;

&lt;p&gt;As we&amp;#8217;ve seen, premature optimization, and overengineering in general, can be costly. But some practices can be downright dangerous. In the right (wrong) circumstances, a security failure can bring down a company.&lt;/p&gt;

&lt;p&gt;This article discusses practices to enhance security using PaaS.&lt;/p&gt;

&lt;p&gt;references:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;http://www.bluebytesoftware.com/blog/2010/09/06/ThePrematureOptimizationIsEvilMyth.aspx&lt;/li&gt;

&lt;li&gt;http://ubiquity.acm.org/article.cfm?id=1513451&lt;/li&gt;

&lt;li&gt;http://en.wikipedia.org/wiki/Program_optimization&lt;/li&gt;

&lt;li&gt;http://www.grandcanyongateway.com/department/category/grand_canyon_skywalk&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Polyglot</title>
   <link href="http://bcferrycoder.github.com/2012/10/21/polyglot"/>
   <updated>2012-10-21T00:00:00-07:00</updated>
   <id>http://bcferrycoder.github.com/2012/10/21/polyglot</id>
   <content type="html">&lt;p&gt;A &lt;strong&gt;polyglot&lt;/strong&gt; defined as is &lt;strong&gt;one who is fluent in multiple languages.&lt;/strong&gt; This is similar to how a multilinguist is &amp;#8230; uh &amp;#8230;fluent inmultiple languages. (OK, who invented two words for the same thing?)&lt;/p&gt;

&lt;p&gt;Well, it turns out polyglot applies not just to spoken languages, but to written languages as well, such as Clojure and Ruby.&lt;/p&gt;

&lt;p&gt;And thus in the software world, a polyglot is an application built on multiple languages. The term also applies to developer tools that can manipulate such apps.&lt;/p&gt;

&lt;h3 id='why_add_complexity'&gt;Why Add Complexity?&lt;/h3&gt;

&lt;p&gt;By definition adding multiple languages increases complexity. Syntax, tools, docs, thought processes, talent pools, libraries, meetups and trade-shows to attend, rss feeds to subscribe to, blogs to read, test strategies, &amp;#8230; there are good reasons to go with a single language to unify the required knowledge and dramatically reduce complexity and overhead.&lt;/p&gt;

&lt;p&gt;Also staffing and building a coherent team can be simpler if all code and all engineers speak the same language.&lt;/p&gt;

&lt;p&gt;So why are polyglot apps rampant in enterprise software endeavors?&lt;/p&gt;

&lt;p&gt;One simple answer is, web apps are rendered in browsers, and browsers speak JavaScript. Until recently, the rest of the application stack was decidedly &lt;em&gt;not&lt;/em&gt; JavaScript. So most web apps are polyglots from day one.&lt;/p&gt;

&lt;p&gt;But that&amp;#8217;s a legacy reason resulting from the explosion in the use of the browser as a user interface container. There are more reasons to build an app stack from multiple languages.&lt;/p&gt;

&lt;h2 id='go_poly_'&gt;Go Poly !!!&lt;/h2&gt;

&lt;p&gt;The best reason to use multiple languages is captured by the simple maxim: &lt;em&gt;Use the Right Tool for the Job&lt;/em&gt;. All languages are not created equal. Successful languages are successful for a reason, usually because of something they do well.&lt;/p&gt;

&lt;p&gt;Consider the following common tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;create a test suite, defining DSLs to orchestrate tests&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;build a secure, transactional, high-volume backend that sits behind REST&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;validate and respond to user input in a browser&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;manipulate registers and hardware in a limited-memory device&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;rapidly prototype a traditional MVC web app&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;build a sophisticated UI-heavy workflow management system&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;frequently perform long-running data-manipulating batch-jobs&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The list of languages chosen for these tasks is as varied as the organizations that make such choices. Influencing factors include compatibilty with existing tools, customer requirements, legacy code, performance criteria, library availability, cost, support options, complexity, open source considerations, team experience and bias&amp;#8230; the list goes on.&lt;/p&gt;

&lt;p&gt;One thing is clear: there is no &amp;#8220;one language fits all&amp;#8221;. So Polyglot apps are here, for the forseeable future anyway. But as mentioned above, adding languages introduces complexity, and complexity comes at a price.&lt;/p&gt;

&lt;h2 id='paas_to_the_rescue'&gt;PaaS to the Rescue&lt;/h2&gt;

&lt;p&gt;Managing versions, libraries, tools, deployment across multiple developers and multple teams (dev, QA, release team, IT) is difficult enough with one language in place. The overhead of using multiple languages can be severe, and often drives organizations to attempt (unsuccessfully) to unify their deployment stack.&lt;/p&gt;

&lt;p&gt;But with the advent of PaaS, a solution is at hand. Nowadays, instead of spending days/weeks and the efforts of multiple teams building up a stack that supports multiple languages, with PaaS a developer can spin up the same stack in minutes.&lt;/p&gt;

&lt;p&gt;In particular, Stackato - FILL - is fluent in a wide range of languages including Java, Python, Ruby, Tcl, Perl, JavaScript, Php, Clojure, Scala, &amp;#8230; and the list is expanding.&lt;/p&gt;

&lt;p&gt;(Side note: Stackato&amp;#8217;s support of 10 (and growing) languages elevates it to the status of true &lt;strong&gt;hyperpolyglot&lt;/strong&gt;: membership in the hyperpolyglot club requires fluency in 6 languages.&lt;/p&gt;

&lt;p&gt;So if you have a hodge-podge app with components built with Ruby on Rails, Python/Django, Java/Play, Java Spring MVC, Clojure, Tcl, and Perl, you can fire up a Stackato instance in minutes and deploy everything with minimal effort, and with consistency across all deployments.&lt;/p&gt;

&lt;h2 id='but_wait_theres_more'&gt;But Wait There&amp;#8217;s More&lt;/h2&gt;

&lt;p&gt;Powerful PaaS solutions support not only multiple languages, but also frameworks that go them them. Spring, Django, Play!, Node&amp;#8230;, more) and bundled services (MySQL, RabbitMQ, Nginx, MongoDB, Redis).&lt;/p&gt;

&lt;h2 id='the_future'&gt;The Future&lt;/h2&gt;

&lt;p&gt;JavaScript has a major advantage over all other languages, in that it is the&lt;/p&gt;

&lt;p&gt;Note: JS has a major advantage over all other languages, in that it has come to be known as the language of the Internet.&lt;/p&gt;

&lt;p&gt;Stackato, with its support of is fluent in &amp;#8220;x&amp;#8221; languages, which makes it not just a polglot, but a full-fledged hyperpolyglot (minimum 6 languages to join that club).&lt;/p&gt;

&lt;p&gt;So in the world of the software developer, a tool (IDE, compiler, CMS, etc) that supports multiple languages is a polyglot.&lt;/p&gt;

&lt;p&gt;And therefore Stackato, with its out-of-the-box support of N languages is considered not just a polyglot, but a hyperpolyglot, since it speaks &amp;#8220;six or more languages fluently.&amp;#8221;&lt;/p&gt;

&lt;p&gt;Java/Python/Ruby/Tcl/Perl/JavaScript/Php/ for starters. But not just the languages, but also the best-of-breed state-of-the-art platforms, frameworks, libraries, containers, and tools that go with them.&lt;/p&gt;

&lt;p&gt;Plus it learns fast, so new language support is fast.&lt;/p&gt;

&lt;p&gt;Why Build a Polyglot Application?&lt;/p&gt;

&lt;p&gt;PaaS gives us the means, what&amp;#8217;s the motive?&lt;/p&gt;

&lt;p&gt;The correct answer is: don&amp;#8217;t. At least, prefer &amp;#8220;omniglot&amp;#8221; (homogenous) application stacks, other factors being equal. Polyglotism (can I call it polyglotamy?) adds complexity, and complexity is expensive.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Sidebar: I&amp;#8217;ve witnessed single enterprise applications built on as many as 12 separate language:&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;example: Java, JavaScript, PHP, Ruby, sh, ddl, xml (in this context it was a language)&lt;/p&gt;

&lt;p&gt;Remember 400 line php app to rename two files&amp;#8230; progress bars and everything&lt;/p&gt;

&lt;p&gt;Poliglotamy causes engineers are either diluted or they tend to become silo&amp;#8217;d (antipattern #7).&lt;/p&gt;

&lt;p&gt;]&lt;/p&gt;

&lt;p&gt;But several factors outweigh the increased complexity costs.&lt;/p&gt;

&lt;p&gt;An application built with multiple languages is obviously more complex than one written with a single language. So, why do this?&lt;/p&gt;

&lt;p&gt;Tools: specific tools often require specific languages. This includes libraries, frameworks, etc.&lt;/p&gt;

&lt;p&gt;Expertise: Value your in-house expertise, and encourage, where it makes sense, internal development using their technologies of choice&lt;/p&gt;

&lt;p&gt;Performance Some tools/languages perform better, by design. If you need very high performance and scalability, consider&lt;/p&gt;

&lt;p&gt;Speed of development (mention DSLs):&lt;/p&gt;

&lt;p&gt;Language characteritics (type-saftey needed some places not other)&lt;/p&gt;

&lt;p&gt;A complex enterprise apps have lots of moving parts. Message systems, batch jobs, analytics tools, and countless additional services must work in harmony with each other and with the overall application purpose.&lt;/p&gt;

&lt;p&gt;And some tasks beg for specific tools or languages that are particularly adept at solving specific problems. In fact sometimes this is a requirement.&lt;/p&gt;

&lt;p&gt;For example, example you probably wouldn&amp;#8217;t choose Python for high performant and tasks that require sophiticated thread managment, while at the same time you might avoid building a DSL in Java.&lt;/p&gt;

&lt;p&gt;Also in-house engineering expertise, which often comes in the form of deep knolwedge of particular technologies, is valuable and should be tapped.&lt;/p&gt;

&lt;p&gt;Say you have two experts Tap any knowledge you have of fluensy with performance testing with RSpec. This might mean building the test framework in Ruby.&lt;/p&gt;

&lt;p&gt;LEGACY POLYGLOTISM&lt;/p&gt;

&lt;p&gt;Note architecture MVC * 3 (REST layer MVC, PHP MVC, Browser MVC) - yuck !&lt;/p&gt;

&lt;p&gt;Mention all langauges in one unmentioned enterprise application.&lt;/p&gt;

&lt;p&gt;BUIDLING NEW POLYGLOT APPLICATIONS&lt;/p&gt;

&lt;p&gt;The reasons above notwithstanding, it&amp;#8217;s generally better to build a complex system with fewer moving parts.&lt;/p&gt;

&lt;h2 id='future_opa_node_etc_make_not_of_architecture'&gt;Future: OPA, Node, etc. Make not of architecture&lt;/h2&gt;

&lt;p&gt;HYPERPOLYGLOT means 6 or more.&lt;/p&gt;

&lt;p&gt;The choice depends on existing infrastructure, customer requirements, compatibility with existing tools, cost of the solution, availabilty of libraries, developer team experience and biases.&lt;/p&gt;

&lt;p&gt;OK I&amp;#8217;ll stop now. The point is, enterprise apps often have to do these and many other things. Rarely, if ever, is a single language able to fit the bill for everything that needs to be done.&lt;/p&gt;

&lt;p&gt;Other factors that influence choosing multiple languages are:&lt;/p&gt;

&lt;p&gt;In-house Talent: if you have an engineer&lt;/p&gt;

&lt;p&gt;This diversity usually promotes great creativevy.&lt;/p&gt;

&lt;p&gt;But the truth, in today&amp;#8217;s software environments,&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s clear the polyglot apps with is, for the forseeable future anyway.&lt;/p&gt;

&lt;p&gt;with PaaS, the effort involved in deploying an application built on multiple languages is reduced almost to zero.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Enterprise Java and Stackato</title>
   <link href="http://bcferrycoder.github.com/2012/10/21/enterprise-java-and-stackato"/>
   <updated>2012-10-21T00:00:00-07:00</updated>
   <id>http://bcferrycoder.github.com/2012/10/21/enterprise-java-and-stackato</id>
   <content type="html">&lt;h3 id='java_still_in_the_lead_after_sixteen_years'&gt;Java Still in the Lead After Sixteen Years&lt;/h3&gt;

&lt;p&gt;Twitter recently and publicly announced that by &lt;a href='http://www.infoq.com/news/2012/11/twitter-ruby-to-java'&gt;swapping out Ruby for Java&lt;/a&gt; and JVM-based Scala, they were able to survive the US election.&lt;/p&gt;

&lt;p&gt;They must have looked at the &lt;a href='&amp;quot;http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html&amp;quot;'&gt;TIOBE Programming Community Index&lt;/a&gt; where Java is rated the secondmost popular programming language after C.&lt;/p&gt;

&lt;p&gt;(This incidentally is a testament to Java&amp;#8217;s performance improvements over the years: Not so long ago Twitter would likely have bypassed Java altogether and gone straight to C).&lt;/p&gt;

&lt;p&gt;Performance aside, why is the Enterprise so attracted to Java? &lt;br /&gt; &lt;br /&gt;&lt;/p&gt;
&lt;img src='/assets/images/enterprisejava.png' width='85%' /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;p&gt;The answer is best understood by flipping the question upside down: &lt;strong&gt;What software traits do enterprises value?&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id='enterprise_software'&gt;Enterprise Software&lt;/h4&gt;

&lt;p&gt;Corporations that rely on software to keep them competitive and profitable frequently need software that exhibits some/many of these characteristics:&lt;/p&gt;
&lt;table width='95%'&gt;
    &lt;tr&gt;
      &lt;td&gt;&amp;bullet; high performance&lt;/td&gt;
      &lt;td&gt;&amp;bullet; secure&lt;/td&gt;
      &lt;td&gt;&amp;bullet; scalable&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&amp;bullet; reliable&lt;/td&gt;
      &lt;td&gt;&amp;bullet; portable  (really?)&lt;/td&gt;
      &lt;td&gt;&amp;bullet; monitoring&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&amp;bullet; integrated&lt;/td&gt;
      &lt;td&gt;&amp;bullet; managed&lt;/td&gt;
      &lt;td&gt;&amp;bullet; maintainable&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&amp;bullet; rapid development&lt;/td&gt;
      &lt;td&gt;&amp;bullet; rich, web-based UI&lt;/td&gt;
      &lt;td&gt;&amp;bullet; productive for developers&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;&lt;br /&gt;
&lt;p&gt;Java excels in these areas due to a number of its features, many of which were popularized in the mid &amp;#8217;90s by Java itself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Threads&lt;/strong&gt;: Java&amp;#8217;s mature, robust, flexible, and precise threading mechanism has been succussfully utilitized to solve countless difficult synchronization problems, increasing reliability and boosting performance.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Exceptions&lt;/strong&gt;: Proper use of Java&amp;#8217;s exception mechanism significantly increases program reliability and code maintainability&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Memory management&lt;/strong&gt;: Improves reliability, with a side effect of increasing productivity.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Static type system&lt;/strong&gt;: Imrproves reliability&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;JVM/Bytecode&lt;/strong&gt;: Portability&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;** Bytecode verification/Security Libraries/&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Rich Ecosystem&lt;/strong&gt;: Vast and mature set of tools/libraries/APIs/IDEs,test suites/ available&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Large developer pool&lt;/strong&gt;: easier to hire for, faster to get up to speed&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The list goes on, but Java&amp;#8217;s facility in delivering these features ensures that Enterprise Java is not going away anytime soon.&lt;/p&gt;

&lt;h3 id='stackato_welcomes_java_as_a_first_class_citizen'&gt;Stackato Welcomes Java as a First Class Citizen&lt;/h3&gt;

&lt;p&gt;Out of the box, Stackato supports Java, a multitude of Java frameworks like Spring and Play!, and most of the JVM-language derivatives such as Clojure and Scala.&lt;/p&gt;
&lt;img src='http://www.comscigate.com/gifs/duke/DukePlaneKDK6_4inches.gif' /&gt;
&lt;p&gt;&lt;strong&gt;Spring&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Spring offers a vast range of functionality including dependency injection, AOP, service abstraction, batch, integration, and security frameworks. As such it&amp;#8217;s a popular choice for enterprise developers. SpringSource, now part of VMWare, has been instrumental in Spring&amp;#8217;s evolution.&lt;/p&gt;

&lt;p&gt;Stackato support for spring is automatic and requires little to no configuration. Additionally a plugin for the Eclipse-based &lt;a href='http://www.springsource.org/sts'&gt;Spring Tool Suite&lt;/a&gt; allows direct control of Stackato from the IDE.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Java Web&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;The Java Web framework as specified in the servlet spec basically defines an exploded file structure minimally consisting of WEB-INF/web.xml deployment descriptor. This is then deployed to a container such as tomcat, websphere, or jboss.&lt;/p&gt;

&lt;p&gt;Stackato immediately recognizes Java Web structured apps. These can be delivered in the form of a .war file (in which case the app is deployed to tomcat/tomee), an .ear file (these deploy to jBoss), or an exploded Java web directory. In all cases they&amp;#8217;re deployed to apache tomcat (or more preciselyTomEE)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JEE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Apache TomEE is an enterprise-ready, fully tomcat-compatable JAva app container with extras for enterprise development including JAX-RS, the infamous EJBs, JSP, JSF, JTA, JPA, CDI, Bean Validation and EJB Lite.&lt;/p&gt;

&lt;p&gt;JEE supports all the TLAs.&lt;/p&gt;

&lt;p&gt;These apps are recognized using the same mechanism that Java Web apps are (ie., rapidly and with no configuration).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Play!&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;The Play! framework, making great headway, is a Java/Scala framework that&amp;#8217;s modeled closely after Ruby on Rails: the app structure is almost idential, as are the means of creating and invoking controls, models and views.&lt;/p&gt;

&lt;p&gt;From building POCs to full-fledged mid-tier apps, Play! is a great choice. It has hooks for various databases, and there is a fair amount of community activity.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve heard that the Play! community may be gravitating towards Scala these days, which makes me nervous that it will fragment and the Java momentum will lose steam. But as it is now, Play! is powerful and gratifying, and worthy of the trailing bang in its name.&lt;/p&gt;

&lt;p&gt;I digress. Stackato deploys Play! via buildpacks (see next item) and all versions of Play! are supported (up to 2.0.4 as of this writing).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Heroku Buildpacks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Heroku introduced the concept of a buildpack, a network-available directory containing (at minimum) three scripts which take care of all steps needed to deploy an application to Heroku.&lt;/p&gt;

&lt;p&gt;Stackato Buildpacks are fully compatible with the Heroku Buildpack spec. As a result, any heroku buildpack, such as The &lt;a href='https://devcenter.heroku.com/articles/buildpacks'&gt;Java BuildPack&lt;/a&gt; available in github, deploys any standard Java app based on &lt;a href='http://maven.apache.org/'&gt;apache maven&lt;/a&gt; to the Stackato instance.&lt;/p&gt;

&lt;h2 id='the_8020_rule'&gt;The 80/20 Rule&lt;/h2&gt;

&lt;p&gt;About 80% of the Java apps I&amp;#8217;ve built and tested on Stackato were have deployed without problem or reconfiguration. What about the other 20? This is where custom buildpacks come in useful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Custom Buildpacks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Custom buildpacks are be used for more sophisticated build procedures with complex dependencies, or non-standard build scripts. Stackato Buildpacks are trivial to create a new buildpack by simply visit &lt;a href='https://devcenter.heroku.com/x?url=https%3A%2F%2Fgithub.com%2Fheroku%2Fheroku-buildpack-java'&gt;one&lt;/a&gt; and clicking Fork.&lt;/p&gt;

&lt;p&gt;Buildpacks all you to deploy pretty much anything you can script (which is pretty much anything).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JVM-language Derivatives&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Buildpacks are the basis of Stackato&amp;#8217;s support for the multitude of JVM-based langauges that are currently available including Clojure, JRuby, Jython, Groovy, Scala, Rhino, Erjang, JavaFX Script, Clojure and more. Like with Java, apps built on these languages and their associated frameworks (Grails, Rails, Lift, &amp;#8230;) can usually be deployed to Stackato with no additional configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;#8217;t forget Polyglot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Rare enterprise applications are built on a single programming language. Java is not the best choice for everything (building a rich UI, or a test orchestration suite, or a DSL)&lt;/p&gt;

&lt;p&gt;This is where &lt;a href='http://www.activestate.com/blog/2012/11/polyglot'&gt;Polyglot&lt;/a&gt; comes in. Multi-lingual applications can be easily deployed to Stackato just as easily as Java applications can. So use Ruby to write a DSL, Perl for text processing, Clojure for elegance, Python for maintainability/readability/fun, .Net for legacy, PHP for &amp;#8230; pretty html printing.&lt;/p&gt;

&lt;p&gt;And use Java for the heavy lifting.&lt;/p&gt;

&lt;p&gt;&lt;a href='http://activestate.com/stackato'&gt;Download Stackato now&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>combatting_draft3</title>
   <link href="http://bcferrycoder.github.com/2012/10/21/combatting_draft3"/>
   <updated>2012-10-21T00:00:00-07:00</updated>
   <id>http://bcferrycoder.github.com/2012/10/21/combatting_draft3</id>
   <content type="html">&lt;p&gt;A 75 foot platform poised over Arizona&amp;#8217;s Grand Canyon gives visitors the opportunity to gaze through their feet at&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Combatting_Draft2</title>
   <link href="http://bcferrycoder.github.com/2012/10/21/combatting_draft2"/>
   <updated>2012-10-21T00:00:00-07:00</updated>
   <id>http://bcferrycoder.github.com/2012/10/21/combatting_draft2</id>
   <content type="html">&lt;p&gt;NOTE: use this: as example headers http://joel.is/post/34043941681/want-to-be-successful-be-inconsistent&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Abstract:&lt;/p&gt;

&lt;p&gt;Premature optimization, which involves dedicating early cycles to improve application performance, often results in &amp;#8220;overengineering&amp;#8221;: or building something to be more robust, or fast, or complex than it needs to be.&lt;/p&gt;

&lt;p&gt;This article examines this well-known antipattern, and shows some not-so-obvious, more incidious causes of premature optimization. Scaling is sometimes confused with optimization, and scaling requirements can seduce coders into preoptimizing.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Overengineering&lt;/p&gt;

&lt;p&gt;Visitors to the Grand Canyon in Arizona can step onto a platform with transparent floors that&amp;#8217;s poised over the abyss. This platform, called hte &amp;#8220;Skywalk,&amp;#8221; is built to hold 120 people who can gaze through the glass floor (and through 4000 feet of Arizona air) at the Colorado river far below.&lt;/p&gt;
&lt;img src='http://upload.wikimedia.org/wikipedia/commons/thumb/a/a1/Grand-canyon-west-skywalk.jpg/450px-Grand-canyon-west-skywalk.jpg' /&gt;
&lt;p&gt;Obviously the Skywalk needs to be strong enough to hold 120 people. And it most definitely is: the foundation is structurally rated to support .. get this &amp;#8230; 71 million pounds (!)&lt;/p&gt;

&lt;p&gt;That seems a bit&amp;#8230;extreme. For example, to exceed this capacity without overcrowding, the 120 folks on the bottom would EACH need to carry FOUR HUNDRED THOUSAND people on their shoulders.&lt;/p&gt;

&lt;p&gt;This is a classic case of &amp;#8220;overengineering&amp;#8221;, or building something to be more robust, or faster, or complex than it needs to be.&lt;/p&gt;

&lt;p&gt;Overengineering isn&amp;#8217;t necessarily a bad thing. In the case of the Skywalk, &amp;#8220;over&amp;#8221;-engineering is certainly better than &amp;#8220;under&amp;#8221;-engineering. I&amp;#8217;d alo bet that building a foundation to support 71 million pounds isn&amp;#8217;t exhorbitantly more expensive than building one that can support 2 million pounds. And the extra hype probably makes it worth it. Heck, it makes me want to go jump on it.&lt;/p&gt;

&lt;p&gt;But overengineering is a problem if it incurs cost.&lt;/p&gt;

&lt;p&gt;Building something that&amp;#8217;s not needed is a waste of time, and requires extra resources (hardware, programmers, docs, infrastructure,), Worse, overengineering is harmful when it results, as it often does, in increased complexity.&lt;/p&gt;

&lt;p&gt;So it&amp;#8217;s worth identifying situations where overengineering commonly occurs. And the practice of &amp;#8220;Premature Optimization,&amp;#8221; where optimization effort is spent early in an application&amp;#8217;s lifecycle, is a common engineering practice that often results in overengineering.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Premature Optimization&lt;/p&gt;

&lt;p&gt;Premature Optimization is likely the most famous software antipattern and has been discussed actively for almost 40 years since Donald Knuth&amp;#8217;s famous &amp;#8220;premature optimization is the root of all evil&amp;#8221; quote. This has spawned countless debates over optimization strategies, and these debates have brought up some good reasons not to over-invest in code optimization at the front-end of the Software Development Lifecycle (SDLC).&lt;/p&gt;

&lt;p&gt;Why is Optimizing Early a Problem?&lt;/p&gt;

&lt;p&gt;Some reasons why you should avoid optimizing an application before its performance characterstics are fully understood:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Application requirements tend to change during the early phases of development. Clearly there&amp;#8217;s no point optimizing something that eventually gets eliminated due to requirements changes.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Often the component that&amp;#8217;s the target of optimization turns out not to be a bottleneck, so even after it&amp;#8217;s optimized, the overall app throughput doesn&amp;#8217;t improve&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;As tempting as it is, focusing granularly on specific &amp;#8220;underperforming&amp;#8221; components fails to look at the &amp;#8220;big picture.&amp;#8221; Perhaps it makes more sense to &amp;#8220;scale out,&amp;#8221; or increase the number of running component instances, than it does to optimize the component itself.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;In general, optimized code is far more complex (and thus far less maintainable) than the equivalent non-optimized code: that is, optimization and obfuscation tend to go hand-in-hand. Complex and difficult to maintain code have long-term ill-effects on all aspects of a product&amp;#8217;s success.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;#8217;s well known that the cost of discovering a design defect goes up dramatically the later it&amp;#8217;s discovered in an application lifecycle.&lt;/p&gt;

&lt;p&gt;Similarly, determining what needs optimizing is easier later in an application lifecycle. At the early phases it&amp;#8217;s difficult to get a handle on what will, in the end, benefit from optimization. Because of this, early effort spent optimizing tends to be wasted effort.&lt;/p&gt;

&lt;p&gt;Beyond Code Tweaking&lt;/p&gt;

&lt;p&gt;Premature optimization is a familiar concept for experienced coders who generally perform optimization by tuning methods and algorithms.&lt;/p&gt;

&lt;p&gt;But premature optimization reaches beyond algorythm enhancement, code tuning, and memory access efficiencies. Some common and incipient optimizations can sneak into the app lifecycle when no-one is looking.&lt;/p&gt;

&lt;p&gt;For example, consider a startup at the early phases of its app lifecycle. It has the killer idea, already prototyped and funded, which will undoubtably surpass twitter in popularity. But time is of the essense: to beat the comptetition this needs needs to get out the door fast. Also because of its certain popularity, it needs to scale.&lt;/p&gt;

&lt;p&gt;The architects have determined that a message-based system makes the most sense, so the new engineering team needs a fast message broker to relay messages between the various app components. And because messaging technologies are fast evolving it makes sense to dedicate a team member to evaluate the current breed of message products and recommend a product that, given the scaling requirements, can perform.&lt;/p&gt;

&lt;p&gt;This performance evaluation is a natural step, and doesn&amp;#8217;t take a big hit, maybe a day or two of engineer/architect time.&lt;/p&gt;

&lt;p&gt;STOP!&lt;/p&gt;
&lt;img src='STOPSIGN' /&gt;
&lt;p&gt;This is a perfect example of premature optimization. The two day hit early in the cycle is costly, and that time can be put to much better uses. We&amp;#8217;ll cover those uses shortly, but first, let&amp;#8217;s talk about PaaS.&lt;/p&gt;

&lt;p&gt;Platform as a Service&lt;/p&gt;

&lt;p&gt;Platform as a Service (PaaS) provides enterprises a fully fleshed-out foundation from which to launch development efforts. The better PaaS offerings include a variety of services, configured to work out-of-the-box with no extra overhead installing, configuring, deploying. Or for that matter evaluating. In addition to databases, and app containers, PaaS offerings often include one more more common message brokers.&lt;/p&gt;

&lt;p&gt;My suggestion here: skip the two-day broker evaluation and instead use the Paas as the basis for your development efforts, and incorporate the PaaS-bundled message broker. This allows you to get the application off the ground, stabilize the data-flow and evaluate the archecture, while also thoroughly measuring and analyzing its performance characteristics.&lt;/p&gt;

&lt;p&gt;Then, possibly weeks/months later, after the data-flow has stabilized, the requirements have matured, the app architecture has gelled, and the application skeleton is has firmed up, you have a basis from which to thoroughly evaluate the performance characteristics of your application.&lt;/p&gt;

&lt;p&gt;Optimization and Scaling&lt;/p&gt;

&lt;p&gt;Generally an app has more money-making potential if it has lots of users. And lots of users means it must scale. Unfortunately the scaling requirement incorrectly fuels the tendency to optimize early as the concepts of optimization and scaling are frequently confused.&lt;/p&gt;

&lt;p&gt;But equating optimization with scaling is a fallacy. Optimization != Scaling. The two are related, but the former should be postponed as much as possible, while the latter must happen from the outset.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;sidebar: failing &amp;#8220;slash-dot effect&amp;#8221; - show graph - social networking (twitter, facebook, linkedin, and news aggregators: techcrunch, hacker news, slash-dot)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Building for Scale&lt;/p&gt;

&lt;p&gt;Building for scale doesn&amp;#8217;t mean making all your code fast: it means designing your app for scale, and gaining a deep understanding of factors that affect performance. A very good way to achieve this by measuring and instrumentation.&lt;/p&gt;

&lt;p&gt;My suggestion is that you take those two days you saved evaluating message brokers, as well as any time you&amp;#8217;re tempted to optimize code, or tools, or algorythms, and pour that time into repeatable performance monitoring and measurement. This could mean trying out performance tools (yourkit, ruby-prof, dtrace, Shark, NodeTime, yslow, google Page Speed - the list is endless, and depends on the underlying technology stack). Or build repeatable performance tests that can be incorporated into your build process.&lt;/p&gt;

&lt;p&gt;Have a look at Gartner&amp;#8217;s &amp;#8220;Magic Quadrant for Application Performance Monitoring&amp;#8221; &lt;span&gt;http://www.gartner.com/technology/reprints.do?ct=120820&amp;amp;id=1-1BRNFO0&amp;amp;st=sg&lt;/span&gt; which emphasizes the importance of profiling, measuring, and tooling to provide visibility into an application&amp;#8217;s performance.&lt;/p&gt;

&lt;p&gt;Bottom line: don&amp;#8217;t optimize but instead become fluent in tools, techniques, and tests to allow you to determine your apps performance characteristics.&lt;/p&gt;

&lt;p&gt;This is where PaaS Shines&lt;/p&gt;

&lt;p&gt;Earlier I suggested using a PaaS product to provide standard services, including the message broker. This is a major time-saver, and a valuable benefit that can &lt;span&gt;leapfrog&lt;/span&gt; your software development efforts. But PaaS has much greater benefits than simply providing standard services with minimal configuration. Scaling is a perfect example.&lt;/p&gt;

&lt;p&gt;A quality PaaS platform enables scalability out of the box. Deply a skeletal, first-cut, minimally functional version of your application at its very early stages to PaaS, instantly deploy it into an environment that can be easily scaled. PaaS allows you to tune and manage resources, spawn multiple service instances (such as message brokers) and see, immediately, the effects of adding additional these resouces to the stack.&lt;/p&gt;

&lt;p&gt;The point here is that you should focus on scaling from day one: the very first line of code you execute should be replicate the underlying components and services. The combination of PaaS with performance tools and tests (many of which are bundled with PaaS) gives you a major headstart when&lt;/p&gt;

&lt;p&gt;Using PaaS to manage your scalability is a perfect way to effect this.&lt;/p&gt;

&lt;p&gt;A companion article&lt;/p&gt;

&lt;p&gt;Summary:&lt;/p&gt;

&lt;p&gt;Instead of optimizing early, invest&lt;/p&gt;

&lt;p&gt;Optimizing early in the SDLC can result in costly overengineering efforts, that are best avoided. Optimization is more than code tweaking: evaluating tools, services, and services for performance also eat up valuable time that can goes to waste if the evaluation wasn&amp;#8217;t needed.&lt;/p&gt;

&lt;p&gt;Platform as a Service provides, out of the box, services, frameworks, and libraries needed by your application. Build the first cut of as much of your stack as possible using bundled technoglies&lt;/p&gt;

&lt;p&gt;But optimization is often confused with scaling. Optimization should be postponed as much as possible, while scaling should be a high priority from day-one.&lt;/p&gt;

&lt;p&gt;Design for scale. Repeatably measure performance. Run at scale from day one.&lt;/p&gt;

&lt;p&gt;Use the PaaS to&lt;/p&gt;

&lt;p&gt;The most damaging result needless opmization efforts is the generation of unmaintainable code which can impact success at any time during an application&amp;#8217;s lifecycle, including long after it&amp;#8217;s been deployed.&lt;/p&gt;

&lt;p&gt;Next antipattern: Postpone Security Considerations&lt;/p&gt;

&lt;p&gt;As discussed, premature optimization, and overengineering in general, can be costly, and can impact your overall success. But there are other commonly practiced antipatterns that can be downright dangerous. On of these is deferring security concerns to later in the application lifecycle.&lt;/p&gt;

&lt;p&gt;Thre reason this is dangerous is because as a security vulnerability, if made public, can in&amp;#8230; damage a company&amp;#8217;s reputation to the point that references: http://www.bluebytesoftware.com/blog/2010/09/06/ThePrematureOptimizationIsEvilMyth.aspx http://ubiquity.acm.org/article.cfm?id=1513451 http://en.wikipedia.org/wiki/Program_optimization WEIGHT: http://www.grandcanyongateway.com/department/category/grand_canyon_skywalk&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Anvils and Lightbulbs</title>
   <link href="http://bcferrycoder.github.com/2012/10/21/anvils-and-lightbulbs"/>
   <updated>2012-10-21T00:00:00-07:00</updated>
   <id>http://bcferrycoder.github.com/2012/10/21/anvils-and-lightbulbs</id>
   <content type="html">&lt;p&gt;This is a presentation, augmented with demo&lt;/p&gt;

&lt;p&gt;LIGHTBULB&lt;/p&gt;

&lt;p&gt;PaaS: for devs convergence of decades of software engineering best practices wave why&lt;/p&gt;

&lt;p&gt;Until now, software tools were divided amongst languages, services, and frameworks&lt;/p&gt;

&lt;p&gt;PaaS unifies application development, and the realm of software engineering, like nothing before. This was inevitable, but the pieces weren&amp;#8217;t in place until recently, with the advent of VMs, &amp;#8230;&lt;/p&gt;

&lt;p&gt;multiple projects by providing a foundation for all developers.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;example list of languages / frameworks&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Every software team has some end goal in sight:&lt;/p&gt;

&lt;p&gt;New project initiated. Plan, hire, research, design, install/configure,&lt;/p&gt;

&lt;p&gt;Heroku: ruby python java scale clojure, node, logo (but not apex) uses git to push: git push heroku master (equiv to stackato push) this git integration gives: instant rollback (heroku rollback) can got back to any version or release&lt;/p&gt;

&lt;p&gt;Note: everything that heroku talks about applies to stackato, but not private&lt;/p&gt;

&lt;p&gt;Add LOGS to PRESO&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Combatting_draft</title>
   <link href="http://bcferrycoder.github.com/2012/10/19/combatting_draft"/>
   <updated>2012-10-19T00:00:00-07:00</updated>
   <id>http://bcferrycoder.github.com/2012/10/19/combatting_draft</id>
   <content type="html">&lt;p&gt;1&amp;#8212; layout: post title: &amp;#8220;combatting_draft&amp;#8221; description: &amp;#8221;&amp;#8221; category:&lt;/p&gt;

&lt;h2 id='tags_scratch'&gt;tags: &lt;span&gt;scratch&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;Antipattern 1: Optimize Early&lt;/p&gt;

&lt;p&gt;Premature Optimization is likely the most famous software antipattern and has been discussed ad-nasium for almost 40 years after Donald Knuth&amp;#8217;s famous &amp;#8220;root of all evil&amp;#8221; quote. This has spawned countless debates over optimization techniques and these have brought up some good reasons not to over-invest in code optimization at the front-end of the SDLC. These have been amply covered in the literature &lt;span&gt;see citations below&lt;/span&gt; but I want to call out in particular the effect that optimizion often leads to obfuscation.&lt;/p&gt;

&lt;p&gt;Increased complexity is the more expensive side-effects of over-zealous optimization. Optimizing almost always involves sophisticated techniques that when captured in code can be somewhat undecipherable. Which then affects maintainability, and the costs snowball from there.&lt;/p&gt;

&lt;p&gt;Beyond Code Tweaking&lt;/p&gt;

&lt;p&gt;Premature optimization reaches beyond algorythm enhancement, code tuning, and memory access. Some common and incipient optimizations can sneak into the app lifecycle when no-one is looking.&lt;/p&gt;

&lt;p&gt;Example: Consider a startup. It has the killer idea, already prototyped and funded, which will undoubtably surpass twitter in popularity. But time is of the essense.&lt;/p&gt;

&lt;p&gt;To implement this, say the new engineering team needs a fast message broker. App performance a massive scaling are primary requirements given the almost certainty of success.&lt;/p&gt;

&lt;p&gt;Messaging technologies are fast evolving and it makes sense to devote someone on the team to spend a few day evaluating the various products and come up with a recommendation. Given the requirements and future, broker performance is the primary focus in the evaluation.&lt;/p&gt;

&lt;p&gt;This evaluation is a natural step, and doesn&amp;#8217;t take a big hit, maybe a day or two of engineer/architect time.&lt;/p&gt;

&lt;p&gt;Just Say No&lt;/p&gt;

&lt;p&gt;But I have a different suggestion: Skip the evaluation altogether, save the one or two days (likely more for reasons we&amp;#8217;ll cover in future articles), and instead use any old message broker that&amp;#8217;s capable of forwarding your messages (which is pretty much all of them unless you have wonky messages). Certainly skip any performance evaluation.&lt;/p&gt;

&lt;p&gt;Not only that, take these two days you saved (or any fraction of the it) and devote it to measuring (repeatably) the performance that you&amp;#8217;re concerned about. Write tests, get up to speed on performance tools, build infrastructure to support tests: choose anything that will help measure the performance of your application as it applies to the bus.&lt;/p&gt;

&lt;p&gt;With repeatable performance measurements you can instantly evaluate your performance needs, know if your current architecture is adaquate, and easily evaluate potential preplacements. Just as valuable, you can use the measurements to evaluate future resource requirements.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;OK, so how does one choose &amp;#8220;any old&amp;#8221; message broker. Well, this is the whole point: Platform as a Service offerings commonly provide message brokers options. I&amp;#8217;m suggesting, take an existing PaaS, use its broker, and &amp;#8230;&lt;/p&gt;

&lt;p&gt;Why Platform as a Service&lt;/p&gt;

&lt;p&gt;Platform as a Service (Paas) provides enterprises a fully fleshed-out foundation from which to launch product development efforts. Often PaaS offerings include a bundled message broker, and that&amp;#8217;s the point of this article: use the bundled broker as the launching point for your app.&lt;/p&gt;

&lt;p&gt;This will allow you to get the application operational, stabilize the data-flow and evaluate the archecture, while also thoroughly measuring and analyzing its performance characteristics.&lt;/p&gt;

&lt;p&gt;Then after the data-flow has stabilized, the app architecture has gelled, and the application skeleton is has firmed up, you have a basis from which to thoroughly evaluate the performance characteristics of your application.&lt;/p&gt;

&lt;p&gt;The alternative, of evaluating and choosing a specific message broker as described above, is in my view &amp;#8220;premature optimization&amp;#8221; and you&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;After you&amp;#8217;re able to see the behavior of the application, oftentimes you discover that the choice of message broker makes little difference to the overall application performance.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;As often as not, any performance issuesthe Oftentimes the underlying message broker turns out&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;The app requirements frequently change dramatically after the customer has seen the first revision of the application, possibily negating any effort spent trying to find the &amp;#8220;best&amp;#8221; message broker.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;SIDEBAR&lt;/span&gt; Coding Techniques to Enable This&lt;/p&gt;

&lt;p&gt;Of course, this requires you write your application in such a way that the integration code to the message broker be independent of the provider itself, but doing so is a common and suggested practice. I.e., you should be doing this anyway.&lt;/p&gt;

&lt;p&gt;The ideas presented above are a variation on the Minimal Viable Product (MVP) theme presented by &amp;#8230;&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s so common and appealing to over-engineer a solution.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Here are the ways that&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Count the ways we save time:&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;(roll into 2)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Sidebar: coding practices&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Mention MVP&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Testing again&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Show how app does scale, and how to integrate 3rd party brokers&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Other Premature Optimizations affected by PaaS&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Summary and teasers&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Discuss several additional advantages to having deployed instantly involving testing, team understanding, more&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;I&amp;#8217;ll discuss practices that ensure the code is easily adaptable across brokers: this brings in the advantages of pologlotism and multiple frameworks, etc.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Tie this with Minimal Viable Products and the additional advantages achieved&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Stress further the importance of testing with repeatable and measurable results&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Show path to making sure the app does scale afterall, how it&amp;#8217;s simple to incorporate third party, external message broker&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Summarize with more on how PaaS enables this rapid and performance, and teasers for future articles.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;Citations: http://www.bluebytesoftware.com/blog/2010/09/06/ThePrematureOptimizationIsEvilMyth.aspx http://ubiquity.acm.org/article.cfm?id=1513451 http://en.wikipedia.org/wiki/Program_optimization&lt;/p&gt;

&lt;h2 id='weight_httpwwwgrandcanyongatewaycomdepartmentcategorygrand_canyon_skywalk'&gt;WEIGHT: http://www.grandcanyongateway.com/department/category/grand_canyon_skywalk&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;This is crazy! http://www2.dupont.com/SafetyGlass/en_US/whats_new/grand_canyon_skywalk.html&lt;/p&gt;

&lt;p&gt;The Grand Canyon Skywalk glass floor can hold the weight of up to&lt;/p&gt;

&lt;h2 id='120_people_and_is_designed_to_handle_winds_up_to_100_miles_per_hour'&gt;120 people, and is designed to handle winds up to 100 miles per hour.&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Overengineering is all-too-common, for the simple reason that engineers like engineering. While it&amp;#8217;s commonly considered an anti-pattern, there are times when over-engineering is perfectly acceptible.&lt;/p&gt;

&lt;p&gt;Take for example the platform with see-through floor reaching out over the Grand Canyon, with 4000 feet of air between it and the Colorado River, and vertical drops of 800 feet.&lt;/p&gt;

&lt;p&gt;The structure itself holds 120 people, but can support &amp;#8230; get this &amp;#8230; 79 million pounds &lt;span&gt;need citation&lt;span /&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s like involve almost 400,000 people stacked vertically on each of the 120 standing on the floor.&lt;/p&gt;

&lt;p&gt;I feel comfortable asserting this is over-engineering. Which is not a bad thing, in this case, but can be.&lt;/p&gt;

&lt;p&gt;Overengineering generally means building&lt;/p&gt;

&lt;p&gt;Overengineering generally falls into one of these categories, the first of which isnt&amp;#8217;t necessarily a liability (cost):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  * building more than required&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;building something unneeded&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overengineering is a problem if:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;practicing it has costs (delayed release,&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;new functionait costs extra for functionality that will never be used or needed&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;it requires&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;it causes actual harm (example below)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The second is to be avoided: a complete waste of time.&lt;/p&gt;

&lt;p&gt;But building more than required&lt;/p&gt;

&lt;p&gt;Need Measurable/Quantifiable&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Premature Optimization is a special case&lt;/p&gt;
&lt;hr /&gt;&lt;hr /&gt;
&lt;p&gt;Take for example the platform, built 5 years ago, that reaches out over the Grand Canyon with 4000 feet of air between it and the Colorado River and vertical drops of 800 feet.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s meant to hold 120 people, but is structually rated for 79 million pounds !()&lt;/p&gt;

&lt;p&gt;To make that weight wihtout overcrowding the floor, each of the 120 folks would need almost 400,000 people on their shoulders.&lt;/p&gt;

&lt;p&gt;mostly best-avoided. or building more than is necessary : Overengineering generally falls into one of these categories, the first of which isnt&amp;#8217;t necessarily a liability (cost):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  * building more than required&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;building something unneeded&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;#8217;s worth examining siturations where overengineering occurs so as to avoid them, or at least choose them wisely..&lt;/p&gt;

&lt;p&gt;To do so I&amp;#8217;ll look at Premature Optimization, a practice that often results in overengineering of some sotr.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ll then dive into scaling issues, which often drive the desire for premature optimization.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s not necessarily a problem. I&amp;#8217;d guess that whatever extra they payed to build to that capacity has been recouped multiple times sheer sensationalism of the number. Wikipedia reports the capacity as the weight of 71 fully loaded Boeing 747s.&lt;/p&gt;

&lt;p&gt;EXAMPLE: startup:&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s natural to, at the outset, spend extra effort evaluating message brokers to determine which are the most capable of scaling.&lt;/p&gt;

&lt;p&gt;Similarly, the cost of scaling an application goes up significanly the later the effort to scale is initiated.&lt;/p&gt;

&lt;p&gt;Too often, the high-scale requirements of web-based applications result in &amp;#8220;Premature Optimization&amp;#8221; a common software antipattern that often results in overengineering.&lt;/p&gt;

&lt;p&gt;As such it&amp;#8217;s worth watching out for all types of over&lt;/p&gt;

&lt;p&gt;without equivalent return. And often it does, which is why overengineering is generally considered an antipattern.&lt;/p&gt;

&lt;p&gt;Premature Optimiation&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ll focus on Premature Optiziation, which often involves overengineering.&lt;/p&gt;

&lt;p&gt;Optimizating early in the app lifecycle often results in overengineering:&lt;/p&gt;

&lt;p&gt;striving for components to perform in a&lt;/p&gt;

&lt;p&gt;building components or systems to be more performant than they need be, or much more common, building specific components are methods to be&lt;/p&gt;

&lt;p&gt;Optimization&lt;/p&gt;

&lt;p&gt;with without spending the days/weeks designing an underlying system. Use the PaaS to enable this.&lt;/p&gt;

&lt;p&gt;Summary:&lt;/p&gt;

&lt;p&gt;And here is where the effort you spent on performance measurement pays off: you can better determine if you&amp;#8217;re not meeting performance requiements, and you can better identify components that need optimization, add the development effort backlog, and prioritize it.&lt;/p&gt;

&lt;p&gt;The point here is that it pays to focus on scaling from day one: the very first line of code you execute should be on a scalable foundation of components and services. The combination of PaaS, with its bundled services and sophisticated scaling mechisms, with performance tools and tests, many of which can themselves be bundled with PaaS, gives you a significat headstart in your application delivery process.&lt;/p&gt;

&lt;p&gt;Instead of optimizing early, invest&lt;/p&gt;

&lt;p&gt;Optimizing early in the SDLC can result in costly overengineering efforts, that are best avoided. Optimization is more than code tweaking: evaluating tools, services, and services for performance also eat up valuable time that can goes to waste if the evaluation wasn&amp;#8217;t needed.&lt;/p&gt;

&lt;p&gt;Platform as a Service provides, out of the box, services, frameworks, and libraries needed by your application. Build the first cut of as much of your stack as possible using bundled technoglies&lt;/p&gt;

&lt;p&gt;But optimization is often confused with scaling. Optimization should be postponed as much as possible, while scaling should be a high priority from day-one.&lt;/p&gt;

&lt;p&gt;Design for scale. Repeatably measure performance. Run at scale from day one.&lt;/p&gt;

&lt;p&gt;Use the PaaS to&lt;/p&gt;

&lt;p&gt;The most damaging result needless opmization efforts is the generation of unmaintainable code which can impact success at any time during an application&amp;#8217;s lifecycle, including long after it&amp;#8217;s been deployed.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Upgrading TomEE in vcap</title>
   <link href="http://bcferrycoder.github.com/2012/10/18/upgrading-tomee-in-vcap"/>
   <updated>2012-10-18T00:00:00-07:00</updated>
   <id>http://bcferrycoder.github.com/2012/10/18/upgrading-tomee-in-vcap</id>
   <content type="html">&lt;h2 id='upgrade_the_stackatobundled_tomee_instance'&gt;Upgrade the Stackato-bundled TomEE instance&lt;/h2&gt;

&lt;p&gt;Stackato v2.0 bundles TomEE v1.0. This version of TomEE results in library incompabilies prompting us to upgrade to TomEE v1.5.0 which fixes these issues.&lt;/p&gt;

&lt;p&gt;This document describes the steps taken to upgrade TomEE to 1.5.&lt;/p&gt;

&lt;h3 id='short_version'&gt;Short version&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Download and verify TomEE 1.5 Plus from &lt;a href='http://openejb.apache.org/downloads.html'&gt;http://openejb.apache.org/downloads.html&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;Remove unneeded files&lt;/li&gt;

&lt;li&gt;Add TomcatStartupListener-1.0.jar from vcap-java&lt;/li&gt;

&lt;li&gt;update tomcat context descriptor (conf/context.xml)&lt;/li&gt;

&lt;li&gt;zip to tomcat.zip&lt;/li&gt;

&lt;li&gt;test with AppStore&lt;/li&gt;

&lt;li&gt;push to vcap-staging repo&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id='detailed_steps'&gt;Detailed Steps&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Download TomEE 1.5 Plus pack from &lt;a href='http://openejb.apache.org/downloads.html'&gt;http://openejb.apache.org/downloads.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: you&amp;#8217;ll see a comment &lt;strong&gt;NOT Java EE6 Certified&lt;/strong&gt; on this page, which you can ignore: it applies to additional libraries bundled with TomEE Plus. The core is TomEE certified, and the additional libraries are needed for Stackato.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Verify md5 sig of downloaded bits&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   $ md5 apache-tomee-1.5.0-plus.tar.gz&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And compare the output to the authoritative signature at &lt;a href='https://repository.apache.org/content/groups/public/org/apache/openejb/apache-tomee/1.5.0/'&gt;https://repository.apache.org/content/groups/public/org/apache/openejb/apache-tomee/1.5.0/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Install a fresh Stackato VM, launch it, ssh to api and navigate to the directory where the tomcat.zip is stored:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   $ stackato ssh api
   $ cd stackato/vcap/staging/lib/vcap/staging/plugin/tomcat_common/resources&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This directory contains tomcat.zip, which is the archived version of tomcat that&amp;#8217;s deployed to each application instance that requires it. You will be replacing this tomcat.zip with the bits for TomEE 1.5.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Move the existing tomcat.zip out of here and unpack the downloaded TomEE tarball:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   $ mv tomcat.zip /tmp/
   $ tar xzf  apache-tomee-1.5.0-plus.tar.gz&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Rename the directory to &amp;#8220;tomcat&amp;#8221; so it zips with correct structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   $ mv  apache-tomee-plus-1.5.0 tomcat&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Clean it up: tomcat includes files we don&amp;#8217;t need, and a few that must be removed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   $ cd tomcat

   # these files are not required, can be safely removed
   $ rm LICENSE NOTICE RUNNING.txt RELEASE-NOTES
   $ rm bin/*.bat bin/*.exe bin/*original* bin/*.txt

   # the default apps in webapps must be removed (for example the
   #  &amp;quot;manager&amp;quot; and host-manager should not be available in each app instance)
   $ rm -rf webapps/*

   # ensure everything in bin is executable
   $ chmod a+x bin/*&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;VCAP needs to manage the tomcat lifecycle, which it accomplishes by registering a TomcatStartupListener in the tomcat context. This listener is part of vcap-java, in &lt;strong&gt;vcap-java/plugins/tomcat_startup_listener&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rebuild the tomcat_startup_listener package:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   $ cd vcap-java/plugins/tomcat_startup_listener
   $ mvn clean package&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And copy the resulting target/TomcatStartupListener-1.0.jar to the lib directory in the new tomcat distribution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   $ scp target/TomcatStartupListener-1.0.jar
   stackato@stackato-aaaa.local:stackato/vcap/staging/lib/vcap/staging/plugin/tomcat_common/resources/tomcat/lib/&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;The tomcat conf/context.xml file needs an additional &amp;#8220;Listener&amp;#8221; directive to enable the startup listener. Edit conf/context.xml to add the directive. Here is a minimal context.xml with comments stripped:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   &amp;lt;?xml version=&amp;#39;1.0&amp;#39; encoding=&amp;#39;utf-8&amp;#39;?&amp;gt;
   &amp;lt;Context&amp;gt;
     &amp;lt;WatchedResource&amp;gt;WEB-INF/web.xml&amp;lt;/WatchedResource&amp;gt;
     &amp;lt;Listener className=&amp;quot;com.vmware.appcloud.tomcat.AppCloudLifecycleListener&amp;quot; /&amp;gt;
   &amp;lt;/Context&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Package up the new tomcat.zip, and remove the unzipped dir:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   zip -r tomcat.zip tomcat
   rm -rf tomcat&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Now test. From the web console visit the App Store and deploy: pet-catalog, Kitchensink, and Movie Fun. These should be working and if so the new tomcat.zip is ready to be pushed to the vcap-staging repo.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Clone vcap-staging, replace tomcat.zip, and commit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   git clone gitolite@gitolite.activestate.com:vcap-staging.git
   cp tomcat.zip vcap-staging/lib/vcap/staging/plugin/tomcat_common/resources/ 
   git add vcap-staging/lib/vcap/staging/plugin/tomcat_common/resources/tomcat.zip
   git commit...  etc.&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Watch tomorrow&amp;#8217;s jenkins logs for test failures. Look for &amp;#8220;hello-spring-mysql&amp;#8221; and &amp;#8220;kitchensink&amp;#8221; failures. There should be none, and if so, all is well.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Questions: see &lt;a href='mailto:johnw@activestate.com'&gt;John Wetherill&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Combatting Antipatterns with PaaS</title>
   <link href="http://bcferrycoder.github.com/2012/10/17/combatting-antipatterns-with-paas"/>
   <updated>2012-10-17T00:00:00-07:00</updated>
   <id>http://bcferrycoder.github.com/2012/10/17/combatting-antipatterns-with-paas</id>
   <content type="html">&lt;p&gt;Technology is advancing at a breathtaking rate, and the discipline of software engineering in particular is achieving heights not imagined a few short decades ago. But many software organizations are hampered, to varying degrees, by one or more common behaviors that often lead to increased cost or risk. These behaviors, known as antipatterns, can strike corporations of all sizes and across almost all industries. Most of these aren&amp;#8217;t show-stoppers, but they can be costly and ultimately impact success.&lt;/p&gt;

&lt;p&gt;The purpose of this series is to raise awareness of several less-than-optimal behaviors commonly practiced in enterprise software development, and to demonstrate how several of these behaviors can be easily corrected by adopting a Platform as a Service (PaaS) solution as a fundamental component of the Software Development Lifecycle.&lt;/p&gt;

&lt;p&gt;Why PaaS? Platform as a Service provides enterprises with a fully fleshed-out platform from which to launch product development efforts. Without such a starting point, many additional decisions and steps must be taken by multiple groups (IT, QA, product team, dev team, DB team). This decision process can be time-consuming, and (due to changing requirements, mixed levels of expertise, and other factors) can lead to suboptimal results.&lt;/p&gt;

&lt;p&gt;PaaS allows software efforts to leapfrog much of this process with a starting point far ahead of conventional software approaches, by providing a scalable, secure, and well-stocked foundation with many of the pieces in place.&lt;/p&gt;

&lt;p&gt;I have been repeatedly amazed by the sheer number of antipatterns that can be remedied by the adoption of PaaS. This series will focus on how PaaS can help reduce or eliminate these behaviors.&lt;/p&gt;

&lt;p&gt;What do Antipatterns Cost? While it&amp;#8217;s meaningless to estimate cost (too many variables), it&amp;#8217;s beneficial to consider it. So consider this: sub-optimal practices can, as we&amp;#8217;ll see, easily add days or weeks to a release cycle. Over multiple releases this can add up to literaly weeks or months. And a one-month delay can make the difference between a successful release and outright failure.&lt;/p&gt;

&lt;p&gt;Also, antipatterns often impact quality, which can have repercussions lasting years into the future and can pose risk acquiring or retaining customers. But one of the biggest, and sadly more common, effects of practicing these antipatterns is the negative effect on employee moral which, if unchecked, commonly leads to attrition.&lt;/p&gt;

&lt;p&gt;Are These Antipatterns Common? Yes, surprisingly so. Over the years I&amp;#8217;ve had the opportunity to observe, at the engineering level, dozens of technology companies of varying sizes including many startups across multiple industries. While many of these corporations are mostly immune from these antipatterns, a surprising number of them are impacted by recurring behavior patterns, several of which can be corrected with small investment.&lt;/p&gt;

&lt;p&gt;The Antipatterns This series will be presented in several installments, each dealing with a specific behavior. The first of these will address &amp;#8220;premature optimization&amp;#8221;, one of the most infamous antipatterns, and certainly one of the most seductive and insidious. Premature optimization is about more than just coding techniques and performance gains, and the next article will highlight additional ways that optimization can impact software success.&lt;/p&gt;

&lt;p&gt;Future articles in the series will focus on antipatterns related to security, testing, logging, development methodologies, and more, many of which can be remedied by adopting Platform as a Service as part of the software development process.&lt;/p&gt;

&lt;p&gt;Mention: Test is focus&lt;/p&gt;

&lt;p&gt;Antipattern 1: Optimize Early&lt;/p&gt;

&lt;p&gt;Premature Optimization is likely the most famous software antipattern and has been discussed ad-nasium for almost 40 years after Donald Knuth&amp;#8217;s famous &amp;#8220;root of all evil&amp;#8221; quote. This has spawned countless debates on what/when/how/why to optimize or avoid, but without going there, there are good reasons not to over-invest in code optimization at the front-end of the SDLC. Theve have been amply covered in the liturature &lt;span&gt;see citations below&lt;/span&gt; but I want to call one out in particular: Optimization often leads to obfuscation.&lt;/p&gt;

&lt;p&gt;Increased complexity is the more expensive side-effects of over-zealous optimization. Optimizing almost always involves sophisticated techniques that when captured in code can be somewhat undecipherable. Which then affects maintainability, and the costs snowball from there.&lt;/p&gt;

&lt;p&gt;But optimization extends beyond algorythm enhancement, code tuning, and memory access. It&amp;#8217;s very common for more incipient optimizations to sneak into your apps lifecycle.&lt;/p&gt;

&lt;p&gt;Example: Consider a startup. It has the killer idea, already prototyped and funded, which will undoubtably surpass twitter in popularity. But time is of the essense.&lt;/p&gt;

&lt;p&gt;To implement this, say the new engineering team needs a fast message broker. App performance a massive scaling are primary requirements given the almost certainty of success.&lt;/p&gt;

&lt;p&gt;Messaging technologies are fast evolving and it makes sense to devote someone on the team to spend a few day evaluating the various products and come up with a recommendation. Given the requirements and future, broker performance is the primary focus in the evaluation.&lt;/p&gt;

&lt;p&gt;This evaluation is a natural step, and doesn&amp;#8217;t take a big hit, maybe a day or two of engineer/architect time.&lt;/p&gt;

&lt;p&gt;Just Say No&lt;/p&gt;

&lt;p&gt;I have a different suggestion: Skip the evaluation altogether, save the one or two days (likely more for reasons we&amp;#8217;ll cover in future articles), and instead use any old message broker that&amp;#8217;s capable of forwarding your messages (which is pretty much all of them unless you have wonky messages). Certainly skip any performance evaluation.&lt;/p&gt;

&lt;p&gt;Not only that, take these two days you saved (or any fraction of the it) and devoteto measuring (repeatably) the performance that&amp;#8217;s a concern. Write tests, get up to speed on performance tools, build infrastructure to support tests, whatever.&lt;/p&gt;

&lt;p&gt;Have repeatable measurements allows you to instatly evaluate your performance needs, and just as valuable, to determine resource requirements.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Benefits of this: are long-term, and it&amp;#8217;s an investment that goes down over time (careers) and increases in values&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ll continue this article with the following points, fleshed out:&lt;/p&gt;

&lt;p&gt;Introduce PaaS, from the point of view of developer, describe how it bundles specific services specificlly one or two message broker implementations (I&amp;#8217;ll hightlighting the other benefits too)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Show how using the bundled message broker allows the performance characteristics of the app to be discovered much much quicker, which then will give indications of whether the bus needs to be scaled at all.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Discuss several additional advantages to having deployed instantly involving testing&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;I&amp;#8217;ll discuss practices that ensure the code is easily adaptable across brokers: this brings in the advantages of pologlotism and multiple frameworks, etc.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Tie this with Minimal Viable Products and the additional advantages achieved&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Stress further the importance of testing with repeatable and measurable results&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;7.&lt;/p&gt;

&lt;p&gt;7.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ll But this isn&amp;#8217;t just MVP for MVP&amp;#8217;s sake (which already has high). We just gained say, a month of lead time &lt;span&gt;WHAT? SIDEBAR&lt;/span&gt;. Let&amp;#8217;s milk it a bit.&lt;/p&gt;

&lt;p&gt;And now, you have 30 days freed up. Most companies would use this to jump ahead, probably with great reason. But if you can afford to, I you&amp;#8217;ll probably&lt;/p&gt;

&lt;p&gt;INVEST it: My recommendation is, take whatever time you would have spent on premature optimization, and instead, focus on measuring and testing. Example: mount a three day effort to measure the performance of the (existing, free as in free lunch) bus. Work with what you&amp;#8217;ve been handed to (on a golden platter I might add).&lt;/p&gt;

&lt;p&gt;Focus on the performance and measurement. Write tests, research tools (YourKit).&lt;/p&gt;

&lt;p&gt;Then you have&lt;/p&gt;

&lt;p&gt;But, and this gets to the point: code optimizations are what we commonly think of when we avoid premature optimization.&lt;/p&gt;

&lt;p&gt;Bare with me. I&lt;/p&gt;

&lt;p&gt;&amp;#8220;Platform as a Service&amp;#8221; an upcoming and I think soon to be groundshaking technology for software engineers, teams, and corporations.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;INSERT PAAS MESSAGES HERE&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;From the developer&amp;#8217;s viewpoint, the platform allows the use most of the framework/language combinations, plus instant access to tools and services, such as message brokers.&lt;/p&gt;

&lt;p&gt;Download a PaaS, then build your application on the myriad coding-impovement facilities the paas provices.&lt;/p&gt;

&lt;p&gt;The point here is, use whatever you get, for free: no cost, no evaluation, no installation, just use it.&lt;/p&gt;

&lt;p&gt;Even if you know, for example, that it won&amp;#8217;t handle the load when you go viral as you know you will, just do it.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;OK so where were we: I&amp;#8217;ve recommended adopting a possibly inferior and non-performant message broker, to&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;span&gt;Sidebar: this requires that your code can access multiple bus architectures with minimal changes, which it should, and if not, there are great, and easy to access integratino solutions in place. I.e.,, suggest using DAOs or whatever).&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The point is MVP applies right at the start, and this is how it looks.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;But this isn&amp;#8217;t just MVP for MVP&amp;#8217;s sake (which already has high). We just gained say, a month of lead time &lt;span&gt;WHAT? SIDEBAR&lt;/span&gt;. Let&amp;#8217;s milk it a bit.&lt;/p&gt;

&lt;p&gt;And now, you have 30 days freed up. Most companies would use this to jump ahead, probably with great reason. But if you can afford to, I you&amp;#8217;ll probably&lt;/p&gt;

&lt;p&gt;INVEST it: My recommendation is, take whatever time you would have spent on premature optimization, and instead, focus on measuring and testing. Example: mount a three day effort to measure the performance of the (existing, free as in free lunch) bus. Work with what you&amp;#8217;ve been handed to (on a golden platter I might add).&lt;/p&gt;

&lt;p&gt;Focus on the performance and measurement. Write tests, research tools (YourKit).&lt;/p&gt;

&lt;p&gt;Then you have&lt;/p&gt;

&lt;p&gt;But, and this gets to the point: code optimizations are what we commonly think of when we avoid premature optimization.&lt;/p&gt;

&lt;p&gt;But there are other categories of premature optimization that are just occur at the beginning of a software project. These tend to get overlooked as they are less&lt;/p&gt;

&lt;p&gt;IF YOU INSIST, IN PARALLEL YOU can SET SOMEONE THE TASK OF EVALUATING FAST&lt;/p&gt;

&lt;h2 id='brokers_but_that_wont_interrupt_main_dev_flow'&gt;brokers, but that wont interrupt main dev flow.&lt;/h2&gt;

&lt;p&gt;(plus IT needs to get it installed, but that&amp;#8217;s another story)&lt;/p&gt;

&lt;p&gt;evolved recently.&lt;/p&gt;

&lt;p&gt;Resistance is Infutile&lt;/p&gt;

&lt;p&gt;A software team implements&lt;/p&gt;

&lt;p&gt;Kicking off your latest project you determine To kick off For your latest project you determine that a message bus and integration framework is a good You determine that a message bus and integration framework is a good solution to the problem, and should scale. You want to use a message queu for similar reasons, for framework reasons you thing AMQ is the way to go.&lt;/p&gt;

&lt;p&gt;So far so good.&lt;/p&gt;

&lt;p&gt;So you spend a few days evaluating various message broker products: ActiveMQ, RabbitMQ, ZeroMQ, Sparrow, Starling, Kestrel, Amazon SQS, Beanstalkd, Kafka. You know you want&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Notes to AS&lt;/p&gt;

&lt;p&gt;Future articles:&lt;/p&gt;

&lt;p&gt;Security and PaaS Drive By Process Change&lt;/p&gt;

&lt;p&gt;Non-PaaS: At what cost?&lt;/p&gt;

&lt;p&gt;Note: I have ideas for the &amp;#8220;Combatting Antipatterns with PaaS&amp;#8221; article that a Platform as a Service will address, however I dno&amp;#8217;t knwo if they&amp;#8217;re in OUR roadmap.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Optimizating Entire SDLC&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;citations&lt;/p&gt;

&lt;h2 id='httpubiquityacmorgarticlecfmid1513451'&gt;http://ubiquity.acm.org/article.cfm?id=1513451&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;finish this article with two more examples of PaaS optimization examples (database, infrastructure, caching mechanism, even process&lt;/p&gt;

&lt;h2 id='stuff_bug_tracking_'&gt;stuff (bug tracking, )&lt;/h2&gt;

&lt;h2 id='combat_overengineering'&gt;Combat: over-engineering&lt;/h2&gt;

&lt;p&gt;DESIGN TEST PROCESS&lt;/p&gt;

&lt;p&gt;But don&amp;#8217;t Optimize, But I have a different suggestion. Trade the two plus days of research/deployment into two days of tool shedding and your approach involves probably two days architect/developer time then 1/2 day with&lt;/p&gt;

&lt;p&gt;ThisThis: trade those evaluation and installation days data, instead take a message broker, any broker capable of forwarding your data (which is all of them unless you have wonky needs) and implement to that.&lt;/p&gt;

&lt;p&gt;However,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;this has been beat to death (knuth)&lt;/li&gt;

&lt;li&gt;seductive&lt;/li&gt;

&lt;li&gt;many less obvious paths to needless optimization that&lt;/li&gt;

&lt;li&gt;tie into MVP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Early in the development cycle of an application,&lt;/p&gt;

&lt;p&gt;Takes discipline to resist, but&amp;#8230; Resist! Resistance is Infutile Allows you to&lt;/p&gt;
&lt;hr /&gt;&lt;hr /&gt;
&lt;p&gt;From a coding perspective&lt;/p&gt;

&lt;p&gt;(Sure, it&amp;#8217;s possible that the broker you pick won&amp;#8217;t meet performance requirements, but you&amp;#8217;ll soon see why that&amp;#8217;s still the better path.)&lt;/p&gt;

&lt;p&gt;and weservices and much any langage, frakefra The platform typically includes languages, tools, frameworks, web apps, as well as services such as&amp;#8230; message brokers.&lt;/p&gt;

&lt;p&gt;I see heads shaking, fists rising.&lt;/p&gt;

&lt;p&gt;Before you fetch your pitchforks, consider my reasoning, which follow&lt;/p&gt;

&lt;h2 id='after_i_take_a_minor_sidetrip_to_cover_a_newpaas'&gt;after I take a minor sidetrip to cover a newPaaS.&lt;/h2&gt;

&lt;p&gt;The point is (like scrum) Fail early and often)&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>StackatoPacks</title>
   <link href="http://bcferrycoder.github.com/2012/09/16/stackatopacks"/>
   <updated>2012-09-16T23:04:00-07:00</updated>
   <id>http://bcferrycoder.github.com/2012/09/16/stackatopacks</id>
   <content type="html">&lt;h2 id='antipatterns_and_opportunity'&gt;Antipatterns and Opportunity&lt;/h2&gt;

&lt;p&gt;Antipatterns abound in software development organizations. This is bad ( == expensive) for the organizations but it&amp;#8217;s a great opportunity for us.&lt;/p&gt;

&lt;p&gt;Focus:&lt;/p&gt;

&lt;p&gt;Awareness and Adoption Differentatiors Partnerships Enterprise Hardiness Antipattern Prevention (with Stackato)&lt;/p&gt;

&lt;p&gt;Strategy:&lt;/p&gt;

&lt;p&gt;1. identify common and costly antipatterns 2. minimize and eliminate these with Stackato 3. docs/blogs/screencasts/podcasts/slide-decks&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;ACM Talk: Enterprise Disintegration Antipatterns&lt;/p&gt;

&lt;p&gt;Abstract:&lt;/p&gt;

&lt;p&gt;This talk lists eight costly and surprisingly common antipatterns found in corporations of all sizes and industries. Each will be explored in detail, followed by a discussion of how PaaS can reduce or in many cases eliminate the causes of the patterns, in most cases&lt;/p&gt;

&lt;h2 id='without_the_developer_even_needing_to_know'&gt;without the developer even needing to know.&lt;/h2&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;p&gt;1. force-feed a methodology change 2. little to no security strategy or mindshare 3. engineering silos 4. long delays for resources (VMs, containers, dbs) and ticket resolution 5. few in engineering, let alone rest of company, use the product 6. minimal investment in test automation 7. disaster recovery 6. distributed logging 7. environment mismatches 8. configuration over convention 9. premature optimization 11. nih syndrome (compare with premature optimization: Sing needs to build everything from scratch, but would be better to high-level get things working 12. magic code 13. questionable technology decision making process: who decides and how (think about it) 14. little to no defined scm strategy/process 15. minimal research and diligence selecting technology stack&lt;/p&gt;

&lt;p&gt;What Cost?&lt;/p&gt;

&lt;p&gt;Biggest cost? attrition&lt;/p&gt;

&lt;p&gt;Dive into FORCE FEED METHODOLOGY CHANGE&lt;/p&gt;

&lt;p&gt;Edict: go Agile / 3 months&lt;/p&gt;

&lt;p&gt;While we&amp;#8217;re at it, replace toolset&lt;/p&gt;

&lt;p&gt;Costs: research: what do we need: tools, evaluate and select tools spin up infrastructure install and configure spew documentation scramble for training&lt;/p&gt;

&lt;p&gt;Results: schedule impact bad tools inefficiency morale attrition&lt;/p&gt;

&lt;p&gt;Stackato Agile Pack&lt;/p&gt;

&lt;p&gt;We can fix this with the Stackato Agile Pack: a suite of enterprise tools&lt;/p&gt;

&lt;p&gt;Stackato AgilePack&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; Menu Driven Open and Commercial Software Management for full SDLC&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Agile Menu&lt;/b&gt;&lt;/li&gt;

  &lt;ul&gt;
    &lt;li&gt;  Project Management&lt;/li&gt;
      &lt;ul&gt;
        &lt;li&gt; &lt;input type='checkbox' /&gt;Greenhopper&lt;/li&gt;
	&lt;li&gt; &lt;input type='checkbox' /&gt;LiquidPlanner&lt;/li&gt;
	&lt;li&gt; &lt;input type='checkbox' /&gt;PivitolTracker&lt;/li&gt;
      &lt;/ul&gt;
  &lt;/ul&gt;
&lt;/ul&gt;
&lt;p&gt;Bugs Jira Bugzilla ExtraView YouTrack&lt;/p&gt;

&lt;p&gt;scm git svn Perforce&lt;/p&gt;

&lt;p&gt;Release Engineering Nexium Jenkins CruiseControl&lt;/p&gt;

&lt;p&gt;Docs and Training&lt;/p&gt;

&lt;p&gt;Potential Partners:&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Packs:&lt;/p&gt;

&lt;p&gt;Best Practices are the opposite of Antipatterns&lt;/p&gt;

&lt;p&gt;Logging Agile: bugtrack/project/scm/release/docs/training Security Analytics html5 Pack EIP Pack camel, fuse, spring plus boogs ITkit&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;increase Stackato awareness, elevate ActiveState reputation&lt;/li&gt;

&lt;li&gt;lower barriers to entry&lt;/li&gt;

&lt;li&gt;extend/enhance/broaden the overall platform&lt;/li&gt;

&lt;li&gt;enhance developer experience (deeper docs, enrich community, raise cool factor)&lt;/li&gt;

&lt;li&gt;Stackato physical presence in valley&lt;/li&gt;

&lt;li&gt;partnerships with luminary firms&lt;/li&gt;

&lt;li&gt;thoroughly extoll enterprise-hardiness&lt;/li&gt;

&lt;li&gt;provide foundational app skeletons with all the moving parts but no business logic&lt;/li&gt;

&lt;li&gt;provide targeted app &amp;#8220;bundles&amp;#8221; (major partner opp)&lt;/li&gt;

&lt;li&gt;revolutionary vertical applications based on platform&lt;/li&gt;
&lt;/ol&gt;</content>
 </entry>
 
 <entry>
   <title>Strategies for Success</title>
   <link href="http://bcferrycoder.github.com/2012/09/16/strategies-for-success"/>
   <updated>2012-09-16T00:00:00-07:00</updated>
   <id>http://bcferrycoder.github.com/2012/09/16/strategies-for-success</id>
   <content type="html">&lt;p&gt;A massive wave is forming and is about to slam into shore. This is the &lt;strong&gt;PaaS wave&lt;/strong&gt;, it&amp;#8217;s rolling in now, and it&amp;#8217;s a doozy.&lt;/p&gt;
&lt;img src='/assets/images/bigwave.jpg' /&gt;
&lt;h3 id='were_in_position'&gt;We&amp;#8217;re In Position&lt;/h3&gt;

&lt;p&gt;We are in the perfect position to ride this wave right up onto the beach and into the waiting shuttlecraft &amp;#8211; which will then whisk us up onto the bridge of &lt;a href='#'&gt;The Enterprise&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We have a world-class team, solid reputation, great products. And, we have Stackato.&lt;/p&gt;

&lt;p&gt;However it won&amp;#8217;t be a smooth ride. The PaaS potential is enormous, but the field is packed with ravenous players with deep pockets and legions of engineers. For us to succeed &lt;span class='differentiator'&gt;we need to differentiate, to set Stackato
far above all other comparable products&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;The pages that follow discuss several ways we can differentiate, each falling generally into one or more of these categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;increase Stackato awareness&lt;/li&gt;

&lt;li&gt;lower barriers to entry&lt;/li&gt;

&lt;li&gt;extend/enhance/broaden the overall platform&lt;/li&gt;

&lt;li&gt;enhance developer experience (deeper docs, enrich community, raise cool factor)&lt;/li&gt;

&lt;li&gt;thoroughly extoll enterprise-hardiness&lt;/li&gt;

&lt;li&gt;provide foundational app skeletons with all the moving parts but no business logic&lt;/li&gt;

&lt;li&gt;provide targeted app &amp;#8220;bundles&amp;#8221;&lt;/li&gt;

&lt;li&gt;partnerships with luminary firms&lt;/li&gt;

&lt;li&gt;revolutionary vertical applications based on platform&lt;/li&gt;

&lt;li&gt;ActiveState physical presence in valley&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This site is here to foster the creation of ideas that help us ride the wave. Activators don your wetsuits!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Enterprise Disintegration Antipatterns</title>
   <link href="http://bcferrycoder.github.com/2012/09/16/enterprise-disintegration-patterns"/>
   <updated>2012-09-16T00:00:00-07:00</updated>
   <id>http://bcferrycoder.github.com/2012/09/16/enterprise-disintegration-patterns</id>
   <content type="html">&lt;p&gt;.&lt;/p&gt;

&lt;h3 id='study_failure'&gt;&lt;strong&gt;Study Failure&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Software fails, and the cost of failure extremely high. Fight failure successfully and you&amp;#8217;ll save bigtime. But how does one fight failure? The answer is simple: &lt;strong&gt;Study it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This sounds about as exciting as a &lt;a class='plainlink' href='http://en.wikipedia.org/wiki/Six_sigma'&gt;Six Sigma class&lt;/a&gt;, but it turns out it&amp;#8217;s actually quite fascinating. After a while, patterns emerge. These patterns represent bad choices that end up costing a fortune, and are best avoided.&lt;/p&gt;

&lt;p&gt;We all know that the real reason it&amp;#8217;s fun to study failure is the overwhelming sense of relief that comes from knowing that some other poor sap had to go through this, and NOT ME!&lt;/p&gt;

&lt;p&gt;Anyway I&amp;#8217;m calling these patterns &lt;strong&gt;Enterprise Disintegration Antipatterns&lt;/strong&gt; since they affect corporations of all sizes, they have damaging (disintegrating) consequences, and therefore like all antipatterns, should be avoided.&lt;/p&gt;
&lt;img src='/assets/images/collapsingbuilding.jpg' width='356' /&gt;
&lt;p&gt;&lt;strong&gt;Without a solid foundation the enterprise will disintegrate&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   An Enterprise Disintegration Antipattern is any repeated
   behavior that tends towards failure of enterprise software or
   enterprise software organizations.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ed note: it still sounds mind-numbinginly boring&lt;/strong&gt; &lt;strong&gt;See SIDEBAR How much does this cost?&lt;/strong&gt; &lt;strong&gt;See SIDEBAR What is an antipattern?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The good news is that with a solid foundation, many/most of these patterns can be avoided.&lt;/p&gt;

&lt;p&gt;This series follows a pattern itself, which is to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Identify and describe a common antipattern&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Identify likely causes&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Describe how issue can be avoided using PaaS&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Summarize cost to implement (tco)&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Summary total value/gain&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This blog series highlights that that tends towards a less desirable result. It turns out antipatterns are rampant in enterprise software development. Whether large or small, established or startup, failure, failure happens.&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;ve around a while you&amp;#8217;ve almost certainly seen your share of failure. And if you&lt;/p&gt;

&lt;p&gt;Among the countless failures, big and small, that occur in corporations, big and small, are many&lt;/p&gt;

&lt;p&gt;Which is the subject of this talk: reocurrding patterns that often lead toward software failure.&lt;/p&gt;

&lt;h2 id='study_failure'&gt;Study Failure&lt;/h2&gt;

&lt;p&gt;s is true in with almost anything, close observation of failure yields re-occuring patterns.&lt;/p&gt;

&lt;p&gt;Enterprise Failure seems particularly suited to pattern extraction as you&amp;#8217;ll see.&lt;/p&gt;

&lt;p&gt;For years, every time I experienced or observered failure at my current job, I would consider it&lt;/p&gt;

&lt;p&gt;For a long time, I assume that the failure observed was a (forgive the expression) singleton&lt;/p&gt;

&lt;p&gt;But, like anything else, exposure to something often unveils about patterns in the&lt;/p&gt;

&lt;p&gt;arethis is nothing new. It&amp;#8217;s slightly disturbing to note that with even with Moore&amp;#8217;s law, mind-numbing advances in technology, tools, computer languages, networks, methadologies, test frameworks, &amp;#8230; that we generally still cannot reliably create a system that we can comfortably say &amp;#8220;just works&amp;#8221;.&lt;/p&gt;

&lt;h2 id='step_1_define_your_sidebars'&gt;Step 1: Define your sidebars&lt;/h2&gt;

&lt;p&gt;(Ed: It&amp;#8217;s true: I know this old guy who used to work in a data center with all these ancient IBM 1403&amp;#8230;, and he says that programming is WAY sloppier now than ever. Back then - they web&lt;/p&gt;

&lt;p&gt;software that fails more than&lt;/p&gt;

&lt;p&gt;with all our evolutions, software is continuing to fail. It seems not enough effort is spent fixing failure.&lt;/p&gt;

&lt;p&gt;everyone knows that. Effort spent reducing failure seems well worth it.&lt;/p&gt;

&lt;p&gt;a natural focus for any developer. The fastest way to avoid failing is by failing. But the best way to avoid failing is observing it when it occurs.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;many endeavors failA few tips for setting up more than one sidebar in a Wordpress theme. Multiple sidebars can be used for footers, internal page areas, etc.&amp;#8221; category:&lt;/p&gt;

&lt;p&gt;Build the agile pack thusly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;stackato install agile-pack&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;#8217;ll want to replace it with something like this:&lt;/p&gt;
&lt;hr /&gt;&lt;hr /&gt;
&lt;p&gt;The Idea&lt;/p&gt;

&lt;p&gt;Diluting The Idea&lt;/p&gt;

&lt;p&gt;(one huge lightbulb, dozens of infracstructure effort thingys&lt;/p&gt;

&lt;h2 id='anvils'&gt;(anvils)&lt;/h2&gt;

&lt;p&gt;AntiPattern One: Optimize early&lt;/p&gt;

&lt;p&gt;This is one of the most tantelizing, seductive, and &amp;#8230; nefarious antipatterns. In fact avoiding it is one of the harder engineering problems. Well, hardest engineer problems anyway.&lt;/p&gt;

&lt;p&gt;Consider this O(n4): Problem: documents with words , find &amp;#8230; who knows. but this should be easy. Scenerio:&lt;/p&gt;

&lt;p&gt;for .. for for for end&lt;/p&gt;

&lt;p&gt;You know - it&amp;#8217;s SO tempting to spend a few minutes fixing this. But don&amp;#8217;t.&lt;/p&gt;

&lt;p&gt;WHY: Five reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;it&amp;#8217;s probably fast already&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;it&amp;#8217;s probably fast enough&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;faster usually more complex (engineer time vs. cpu time)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3a. optimization often leads to obfuscation&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;requirements change&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;your time can be MUCH better spent&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Just Say No!&lt;/p&gt;

&lt;p&gt;This is really hard to do: it&amp;#8217;s such a blast to take an method, algorithm, whole application, and Make It FFFaast.&lt;/p&gt;

&lt;p&gt;Many software engineerings thrive on this alone.&lt;/p&gt;

&lt;p&gt;But&amp;#8230; resist Resitance Is Infutile.&lt;/p&gt;

&lt;p&gt;Instead of opgimizing: WRITE TESTS!&lt;/p&gt;

&lt;p&gt;More generally, measure the performance in a repeatable way. Use tests or tools or process, whatever you like, just make sure it can be repeated.&lt;/p&gt;

&lt;p&gt;I.e., trade the 15 minutes (400 hours) you would have spent optimizing the above code for testing time. Set up a test process, research tools, fiddle around with rspec/cucumber/selenium, stand up from your cubicle and yell TEST to everyone within hearing distance.&lt;/p&gt;

&lt;p&gt;Bottom line: Test, don&amp;#8217;t optimize. This is a general theme of this series.&lt;/p&gt;

&lt;p&gt;But how is this relevant here?&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;re reading this magazine chances are you&amp;#8217;re well versed in the various &amp;#8220;Premature Optimization discussions&amp;#8221; triggured decades Dr Dobbs Readers know this already. Premature Optimization has long been eschewed by engineering best practices. And testing is, after a long arduous journey, finally becoming mainstream.&lt;/p&gt;

&lt;p&gt;But pre-omptimization is almost always thought of as tweaking code to make it faster. There are other aspedts of premature optimization that aren&amp;#8217;t so obvious, or cut and dry.&lt;/p&gt;

&lt;p&gt;Scenerio&lt;/p&gt;

&lt;p&gt;You have the software idea of a lifetime, and you just &lt;em&gt;know&lt;/em&gt; this one&amp;#8217;s going to go viral and earn you that yaught/helicoptor combo you&amp;#8217;ve been yearning for.&lt;/p&gt;

&lt;p&gt;You determine that a message bus and integration framework is a good solution to the problem, and should scale. You want to use a message queu for similar reasons, for framework reasons you thing AMQ is the way to go.&lt;/p&gt;

&lt;p&gt;So far so good.&lt;/p&gt;

&lt;p&gt;So you spend a few days evaluating various message broker products: ActiveMQ, RabbitMQ, ZeroMQ, Sparrow, Starling, Kestrel, Amazon SQS, Beanstalkd, Kafka. You know you want&lt;/p&gt;

&lt;p&gt;But:&lt;/p&gt;

&lt;p&gt;Instead&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Demo / or Blog:&lt;/p&gt;

&lt;p&gt;Instantly build ActiveMQ app with node/ror/play + RabbitMQ and mongo: then BLAST it with jMeter.&lt;/p&gt;

&lt;p&gt;Bonus: gmaps and kaazing&lt;/p&gt;

&lt;p&gt;Then scale it!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;viral. &amp;#8216;re building the next facebook, and you know it needs to scale.&lt;/p&gt;

&lt;p&gt;the beginning of you spend weeks evaluating&lt;/p&gt;

&lt;p&gt;RabbitMQ ActiveMQ Tibco&lt;/p&gt;

&lt;p&gt;This is one of the hardest engineering problems known:&lt;/p&gt;

&lt;p&gt;Readers of this magazine know this already. But even so, it&amp;#8217;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Outline:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Antipattern 1: Optimize Early&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li&gt;Antipattern 2: Secure Later&lt;/li&gt;

&lt;li&gt;Antipattern 3: Launch a Drive-By Process Change 4. 3. 4. 5.&lt;/li&gt;
&lt;/ol&gt;</content>
 </entry>
 
 
</feed>